Description of classes in the org.tmatesoft.svn.core.internal.io.fs 
package:

1)FSRepository is the central class that implements the SVNRepository
according to the file:// protocol

2)FSReader - this utility class is used to carry out all low-level 
reading operations such as:
    - reading raw data from revision files (those that can be found in 
      the /db/revs repository directory) and building revision nodes 
      (represented by FSRevisionNode class) from that data
      
    - reading path info and building corresponding PathInfo object from 
      report files (that was worked out by a reporter in an update-like 
      operation)
      
    - reading lock data from lock files (located in a /db/locks/xxx 
      directory) and producing an SVNLock object 

3)FSRevisionNode - encapsulates info about a certain node-rev - that 
is information about a definite node in a certain revision, where 
it was changed. FSRevisionNode objects keep all the fetched values 
of node-rev header keys. Here's an example of a repository root 
revision node:

id: 0.0.r1/110
type: dir
pred: 0.0.r0/17
count: 1
text: 1 63 34 34 18d06e569b1a1c111c2574773e0b2aeb
cpath: /
copyroot: 0 /

A single revision file stores all changed nodes in that revision 
(denoted by the name of the revision file itself) and also all 
the rev nodes of their parents. Example: suppose a file 
/dirA/dirB/file.txt is added in revision 4, the revision file with 
the name "4" will contain rev nodes for: file.txt, dirB, dirA, and 
the repository root - /, since it's a parent for all nodes. So, the 
root revision node always presents in every revision file.

4)FSRepresentation - encapsulates the info listed in the "text:" or 
"props:" header keys of rev nodes. In the above example this info is

text: 1 63 34 34 18d06e569b1a1c111c2574773e0b2aeb

So, FSRepresentation objects keep those parameters:

1 63 34 34 18d06e569b1a1c111c2574773e0b2aeb

where:
1 - rev number of the base contents

63 - offset in the rev file (this is the position from where either 
the word PLAIN or DELTA begins in the file)

34 - the length of the representation (representation may be one of two 
types: 1)PLAIN - that is either contents of a directory or node's properties
listed in a hash format, 2) DELTA - that is a file delta), this length 
does not include neither a header (PLAIN or DELTA) nor the trailer (ENDREP\n)

34 - expanded size, full text size, in other words (I guess, for props and 
dir contents it's equal to the representation length, cause they are always 
written as a full text, not delta, but for files it's not true)

18d06e569b1a1c111c2574773e0b2aeb - hex representation of the MD5 checksum for 
the full contents

5)FSEntry - this class represents a dir node's entry, for example 
this is the representation of the dir contents (for the above example of the 
root rev node):

PLAIN
K 7
MyRepos
V 12
dir 1.0.r1/0
END
ENDREP

where:

K 7
MyRepos
V 12
dir 1.0.r1/0

is a single representation entry.

It contains an entry's name, it's type (or node kind in other words and its 
id). All these attributes are encapsulated in FSRepresentationEntry. Now 
I think it's better to rename it to something like 'FSEntry' - it's simpler 
and clearer to understand.


5)FSID - encapsulates rev node's id - the thig that unambiguously defines 
the place of the rev node in a certain revision and also keeps info about 
the node's ancestry. In the above example the following string:

1.0.r1/0

is the id of the 'MyRepos' entry, where:

1 - is a node-id (for node ancestry)
2 - is a copy-id (for copy ancestry)
r1 - revision 1 (what is the last revision where MyRepos was changed)
0 (following /) - offset in the rev file from where the rev node information 
begins ('key : value' lines)

6)FSRepositoryUtil - this is just a utility class that is responsible
for a common functionality, like determining the repository root dir 
in the filesystem, given a filesystem path (as a File object), and so 
on.

7)FSWriter - all writing functionality, among which are:
    - writing path info to a report file - as a result of making 
      reports
    - writing lock data to /db/locks/xxx/lockdigestfile
    - creating unique tmp files
and so on... I guess write func will grow as we move further (with commit)

8)PathInfo - represents path info that was reported by metods of 
ISVNReporter

9)FSConstants - some basic repository-related constants (taken from native svn)

10)FSHooks - this class is responsible for invoking hook programms 
before/after definite operations, like changing rev props.

11)FSRevisionNodePool & DefaultFSRevisionNodePool - used for retrieving & caching
root rev nodes as well as other rev nodes. Used to optimize the run-time 
characteristics.

12)IFSLockHandler - used to define a handler that is called while checking 
for lock(s) on a path. Known implementations (for now is the same as svn's 
get_locks_callback() function ): handler verifies the lock passed redirecting the 
call to the verifyLock routine. This is done to check whether a one has rights 
to commit to a file.

13)FSKeyGenerator - is a kind of a generator that produces new node- and copy-ids 
according to the same algorithm that the native svn uses.

14)FSTransactionInfo - information of the created transaction (at the start of a commit) 
that holds BASE REVISION (against which a commit is running), TRANSACTION ID - a name 
of an in-filesystem transaction (the name of a txn directory ubder db/transaction)

15)FSTransactionKind indicates the kind of a transaction - this kind is a state 
of a particular txn. A txn may be normal & uncommitted yet (commit is running), 
committed, and uncommitted & dead - commit failed.

16)FSTransaction - a representation of an in-filesystem txn: holds the txn root, 
its kind (or state), txn properties (several of them becomes rev props), copy-ids of 
all copied nodes, baseId against which a txn is committed.

17)FSRoot - roots may be revision roots (immutable, those that were committed and 
no longer be changed), and txn roots (mutable, that are being changing as commit 
runs). There are methods that should work for both kinds of roots (like openPath()). 
So, FSRoot is an abstraction that allows to realize such methods.
 

