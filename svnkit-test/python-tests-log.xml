<?xml version="1.0" encoding="UTF-8"?>
<PythonTests start="2008.09.16  at 20:03:58 CEST" elapsed="1 hours 18 minutes 42 seconds">
  <server name="file" url="file:///home/builder/agent1ram/python/cmdline">
    <suite name="authz" total="0" passed="0" failed="0">
    </suite>
    <suite name="autoprop" total="14" passed="14" failed="0">
      <test name="add: config=no,  commandline=none" id="1" result="PASSED"></test>
      <test name="add: config=yes, commandline=none" id="2" result="PASSED"></test>
      <test name="add: config=no,  commandline=yes" id="3" result="PASSED"></test>
      <test name="add: config=yes, commandline=yes" id="4" result="PASSED"></test>
      <test name="add: config=no,  commandline=no" id="5" result="PASSED"></test>
      <test name="add: config=yes, commandline=no" id="6" result="PASSED"></test>
      <test name="import: config=no,  commandline=none" id="7" result="PASSED"></test>
      <test name="import: config=yes, commandline=none" id="8" result="PASSED"></test>
      <test name="import: config=no,  commandline=yes" id="9" result="PASSED"></test>
      <test name="import: config=yes, commandline=yes" id="10" result="PASSED"></test>
      <test name="import: config=no,  commandline=no" id="11" result="PASSED"></test>
      <test name="import: config=yes, commandline=no" id="12" result="PASSED"></test>
      <test name="add directory" id="13" result="PASSED"></test>
      <test name="import directory" id="14" result="PASSED"></test>
    </suite>
    <suite name="basic" total="40" passed="40" failed="0">
      <test name="basic checkout of a wc" id="1" result="PASSED"></test>
      <test name="basic status command" id="2" result="PASSED"></test>
      <test name="basic commit command" id="3" result="PASSED"></test>
      <test name="basic update command" id="4" result="PASSED"></test>
      <test name="basic mkdir URL" id="5" result="PASSED"></test>
      <test name="basic mkdir URL, including parent directories" id="6" result="PASSED"></test>
      <test name="basic mkdir, including parent directories" id="7" result="PASSED"></test>
      <test name="basic corruption detection" id="8" result="PASSED"></test>
      <test name="receiving text merges as part of an update" id="9" result="PASSED"></test>
      <test name="basic conflict creation and resolution" id="10" result="PASSED"></test>
      <test name="basic cleanup command" id="11" result="PASSED"></test>
      <test name="basic revert command" id="12" result="PASSED"></test>
      <test name="basic switch command" id="13" result="PASSED"></test>
      <test name="basic delete command" id="14" result="PASSED"></test>
      <test name="checkout a path no longer in HEAD" id="15" result="PASSED"></test>
      <test name="attempt to change node kind" id="16" result="PASSED"></test>
      <test name="basic import of single new file" id="17" result="PASSED"></test>
      <test name="basic cat of files" id="18" result="PASSED"></test>
      <test name="basic ls" id="19" result="PASSED"></test>
      <test name="'svn log file:///nonexistent_path' should fail" id="20" result="PASSED"></test>
      <test name="basic auth caching" id="21" result="PASSED"></test>
      <test name="ignored files in added dirs should not be added" id="22" result="PASSED"></test>
      <test name="test add --parents" id="23" result="PASSED"></test>
      <test name="make sure URI syntaxes are parsed correctly" id="24" result="PASSED"></test>
      <test name="trying to check out a file should fail" id="25" result="PASSED"></test>
      <test name="basic info command" id="26" result="PASSED"></test>
      <test name="ignore files matching local ignores in added dirs" id="27" result="PASSED"></test>
      <test name="add ignored files in added dirs" id="28" result="PASSED"></test>
      <test name="check that repos root gets set on checkout" id="29" result="PASSED"></test>
      <test name="checks peg revision on filename with @ sign" id="30" result="PASSED"></test>
      <test name="info on file not existing in HEAD" id="31" result="PASSED"></test>
      <test name="ls a path no longer in HEAD" id="32" result="PASSED"></test>
      <test name="cat added file using -rPREV" id="33" result="PASSED"></test>
      <test name="basic ls of repos with space in name" id="34" result="PASSED"></test>
      <test name="delete file and directory with --keep-local" id="35" result="PASSED"></test>
      <test name="use folders with names like 'c:hi'" id="36" result="PASSED"></test>
      <test name="remotely remove directories from one repository" id="37" result="PASSED"></test>
      <test name="remotely remove directories from two repositories" id="38" result="PASSED"></test>
      <test name="automatic conflict resolution" id="39" result="PASSED"></test>
      <test name="get info on a file not in the repo" id="40" result="PASSED"></test>
    </suite>
    <suite name="blame" total="13" passed="13" failed="0">
      <test name="annotate a file whose name contains a space" id="1" result="PASSED"></test>
      <test name="annotate a binary file" id="2" result="PASSED"></test>
      <test name="annotating a directory not allowed" id="3" result="PASSED"></test>
      <test name="blame output in XML format" id="4" result="PASSED"></test>
      <test name="blame lines from unknown revisions" id="5" result="PASSED"></test>
      <test name="blame targets with peg-revisions" id="6" result="PASSED"></test>
      <test name="blame with different eol styles" id="7" result="PASSED"></test>
      <test name="ignore whitespace when blaming" id="8" result="PASSED"></test>
      <test name="ignore eol styles when blaming" id="9" result="PASSED"></test>
      <test name="test 'svn blame -g'" id="10" result="PASSED"></test>
      <test name="don't look for merged files out of range" id="11" result="PASSED"></test>
      <test name="blame target not in HEAD with peg-revisions" id="12" result="PASSED"></test>
      <test name="blame target not in HEAD" id="13" result="PASSED"></test>
    </suite>
    <suite name="cat" total="5" passed="5" failed="0">
      <test name="cat a local directory" id="1" result="PASSED"></test>
      <test name="cat a remote directory" id="2" result="PASSED"></test>
      <test name="cat a file at revision BASE" id="3" result="PASSED"></test>
      <test name="cat a nonexistent file" id="4" result="PASSED"></test>
      <test name="cat should skip uncattable resources" id="5" result="PASSED"></test>
    </suite>
    <suite name="changelist" total="8" passed="8" failed="0">
      <test name="add and remove files from changelists" id="1" result="PASSED"></test>
      <test name="commit with single --changelist" id="2" result="PASSED"></test>
      <test name="commit with multiple --changelist's" id="3" result="PASSED"></test>
      <test name="info --changelist" id="4" result="PASSED"></test>
      <test name="diff --changelist (wc-wc and repos-wc)" id="5" result="PASSED"></test>
      <test name="propset/del/get --changelist" id="6" result="PASSED"></test>
      <test name="revert --changelist" id="7" result="PASSED"></test>
      <test name="update --changelist" id="8" result="PASSED"></test>
    </suite>
    <suite name="checkout" total="13" passed="13" failed="0">
      <test name="co with obstructions should fail without --force" id="1" result="PASSED"></test>
      <test name="forced co fails if a dir obstructs a file" id="2" result="PASSED"></test>
      <test name="forced co fails if a file obstructs a dir" id="3" result="PASSED"></test>
      <test name="co with faux obstructions ok with --force" id="4" result="PASSED"></test>
      <test name="co with real obstructions ok with --force" id="5" result="PASSED"></test>
      <test name="co with real obstructions and unversioned files" id="6" result="PASSED"></test>
      <test name="forced co with versioned obstruction" id="7" result="PASSED"></test>
      <test name="import and checkout" id="8" result="PASSED"></test>
      <test name="checkout file with broken eol style" id="9" result="PASSED"></test>
      <test name="checkout and create some intermediate folders" id="10" result="PASSED"></test>
      <test name="checkout with peg revision" id="11" result="PASSED"></test>
      <test name="checkout with peg revision date" id="12" result="PASSED"></test>
      <test name="co handles obstructing paths scheduled for add" id="13" result="PASSED"></test>
    </suite>
    <suite name="commit" total="56" passed="56" failed="0">
      <test name="commit one file" id="1" result="PASSED"></test>
      <test name="commit one newly added file" id="2" result="PASSED"></test>
      <test name="commit one newly added binary file" id="3" result="PASSED"></test>
      <test name="commit multiple targets" id="4" result="PASSED"></test>
      <test name="commit multiple targets, 2nd variation" id="5" result="PASSED"></test>
      <test name="commit wc_dir/A/D -- includes D. (anchor=A, tgt=D)" id="6" result="PASSED"></test>
      <test name="commit wc_dir -- (anchor=wc_dir, tgt={})" id="7" result="PASSED"></test>
      <test name="committing unversioned object produces error" id="8" result="PASSED"></test>
      <test name="replace two nested dirs, verify empty contents" id="9" result="PASSED"></test>
      <test name="hudson prob 1.0:  delete file, commit, update" id="10" result="PASSED"></test>
      <test name="hudson prob 1.1:  delete dir, commit, update" id="11" result="PASSED"></test>
      <test name="hudson prob 1.2:  delete, commit, re-add, commit" id="12" result="PASSED"></test>
      <test name="hudson prob 2.0:  prop commit on old dir fails" id="13" result="PASSED"></test>
      <test name="hudson prob 2.1:  move files, update empty dir" id="14" result="PASSED"></test>
      <test name="hook testing" id="15" result="PASSED"></test>
      <test name="commit mixed-rev wc (no erroneous merge error)" id="16" result="PASSED"></test>
      <test name="commit files and dirs with URI-unsafe characters" id="17" result="PASSED"></test>
      <test name="commit deleted yet edited files" id="18" result="PASSED"></test>
      <test name="commit a file inside dir scheduled for addition" id="19" result="PASSED"></test>
      <test name="commit deleted (and missing) file" id="20" result="PASSED"></test>
      <test name="issue 644 attempt to add a file twice" id="21" result="PASSED"></test>
      <test name="commit from a dir with a longer name than the wc" id="22" result="PASSED"></test>
      <test name="try to commit when directory is locked" id="23" result="PASSED"></test>
      <test name="commit the current directory" id="24" result="PASSED"></test>
      <test name="attempted commit from multiple wc fails" id="25" result="PASSED"></test>
      <test name="commit named targets with -N (issues #1195, #1239)" id="26" result="PASSED"></test>
      <test name="commit with conflicts and check txn in repo" id="27" result="PASSED"></test>
      <test name="commit deletion of out-of-date file or dir" id="28" result="PASSED"></test>
      <test name="commit with a log message containing bad data" id="29" result="PASSED"></test>
      <test name="commit with invalid external editor cmd" id="30" result="PASSED"></test>
      <test name="commit with mods in schedule delete" id="31" result="PASSED"></test>
      <test name="tabs in paths" id="32" result="PASSED"></test>
      <test name="local ops should not be treated like commits" id="33" result="PASSED"></test>
      <test name="post commit hook failure case testing" id="34" result="PASSED"></test>
      <test name="commit two targets, both the same folder" id="35" result="PASSED"></test>
      <test name="commit files with inconsistent eol should fail" id="36" result="PASSED"></test>
      <test name="set revision props during remote mkdir" id="37" result="PASSED"></test>
      <test name="set revision props during remote delete" id="38" result="PASSED"></test>
      <test name="set revision props during commit" id="39" result="PASSED"></test>
      <test name="set revision props during import" id="40" result="PASSED"></test>
      <test name="set revision props during repos-to-repos copy" id="41" result="PASSED"></test>
      <test name="set revision props during wc-to-repos copy" id="42" result="PASSED"></test>
      <test name="set revision props during repos-to-repos move" id="43" result="PASSED"></test>
      <test name="set revision props during remote property edit" id="44" result="PASSED"></test>
      <test name="set multiple revision props during remote mkdir" id="45" result="PASSED"></test>
      <test name="set revprop without value ('') during remote mkdir" id="46" result="PASSED"></test>
      <test name="set revprop without '=' during remote mkdir" id="47" result="PASSED"></test>
      <test name="set invalid revision props during remote mkdir" id="48" result="PASSED"></test>
      <test name="start-commit hook failure case testing" id="49" result="PASSED"></test>
      <test name="pre-commit hook failure case testing" id="50" result="PASSED"></test>
      <test name="'svn commit -F foo' when foo is a versioned file" id="51" result="PASSED"></test>
      <test name="'svn commit --changelist=foo' above a conflict" id="52" result="PASSED"></test>
      <test name="try to commit a file that is out-of-date" id="53" result="PASSED"></test>
      <test name="start-commit hook sees client capabilities" id="54" result="PASSED"></test>
      <test name="'svn commit SOME_URL' should error" id="55" result="PASSED"></test>
      <test name="commit a missing to-be-added file should fail" id="56" result="PASSED"></test>
    </suite>
    <suite name="copy" total="71" passed="71" failed="0">
      <test name="basic copy and move commands -- on files only" id="1" result="PASSED"></test>
      <test name="receive a copied directory during update" id="2" result="PASSED"></test>
      <test name="resurrect a deleted directory" id="3" result="PASSED"></test>
      <test name="svn cp URL URL cannot overwrite destination" id="4" result="PASSED"></test>
      <test name="svn cp PATH PATH cannot overwrite destination" id="5" result="PASSED"></test>
      <test name="copy a tree and modify before commit" id="6" result="PASSED"></test>
      <test name="copy files with properties" id="7" result="PASSED"></test>
      <test name="copy a tree and delete part of it before commit" id="8" result="PASSED"></test>
      <test name="move and revert a directory" id="9" result="PASSED"></test>
      <test name="executable bit should be preserved when copying" id="10" result="PASSED"></test>
      <test name="working-copy to repository copy" id="11" result="PASSED"></test>
      <test name="repository to working-copy copy" id="12" result="PASSED"></test>
      <test name="copy item to root of repository" id="13" result="PASSED"></test>
      <test name="copy URL URL/subdir" id="14" result="PASSED"></test>
      <test name="copy WC URL/subdir" id="15" result="PASSED"></test>
      <test name="resurrect a deleted file" id="16" result="PASSED"></test>
      <test name="copy file from repos to working copy and run diff" id="17" result="PASSED"></test>
      <test name="repos-&gt;WC copy with keyword or eol property set" id="18" result="PASSED"></test>
      <test name="revision-kind keywords with non-URL source" id="19" result="PASSED"></test>
      <test name="copy over a missing file" id="20" result="PASSED"></test>
      <test name="copy a deleted directory back from the repos" id="21" result="PASSED"></test>
      <test name="check for double URI escaping in svn ls -R" id="22" result="PASSED"></test>
      <test name="wc to wc copy attempts between different repos" id="23" result="PASSED"></test>
      <test name="wc to wc copy with deleted=true items" id="24" result="PASSED"></test>
      <test name="svn cp src-URL non-existent-URL-path" id="25" result="PASSED"></test>
      <test name="svn cp oldrev-of-deleted-URL URL" id="26" result="PASSED"></test>
      <test name="test URL to URL copying edge case" id="27" result="PASSED"></test>
      <test name="copy wc dir to itself" id="28" result="PASSED"></test>
      <test name="copy a complex mixed-rev wc" id="29" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file" id="30" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file with props" id="31" result="PASSED"></test>
      <test name="svn cp URL PATH replace file" id="32" result="PASSED"></test>
      <test name="svn cp URL PATH replace file with props" id="33" result="PASSED"></test>
      <test name="delete file scheduled for replace" id="34" result="PASSED"></test>
      <test name="move an unversioned file" id="35" result="PASSED"></test>
      <test name="'move' should not lose local mods" id="36" result="PASSED"></test>
      <test name="copy a deleted dir to a prefix of its old path" id="37" result="PASSED"></test>
      <test name="copy a copied file and dir" id="38" result="PASSED"></test>
      <test name="move a copied file and dir" id="39" result="PASSED"></test>
      <test name="move a moved file and dir" id="40" result="PASSED"></test>
      <test name="move a file twice within a moved dir" id="41" result="PASSED"></test>
      <test name="move a file out of a moved dir" id="42" result="PASSED"></test>
      <test name="move a dir twice within a moved dir" id="43" result="PASSED"></test>
      <test name="move a dir out of a moved dir" id="44" result="PASSED"></test>
      <test name="move a moved file back to original location" id="45" result="PASSED"></test>
      <test name="move a moved dir back to original location" id="46" result="PASSED"></test>
      <test name="copy and move added paths without commits" id="47" result="PASSED"></test>
      <test name="copy added uncommitted paths with props" id="48" result="PASSED"></test>
      <test name="copy added path to URL" id="49" result="PASSED"></test>
      <test name="move file using relative dst path names" id="50" result="PASSED"></test>
      <test name="move file using relative src path names" id="51" result="PASSED"></test>
      <test name="copy file using relative dst path names" id="52" result="PASSED"></test>
      <test name="copy file using relative src path names" id="53" result="PASSED"></test>
      <test name="svn mv multiple files to a common directory" id="54" result="PASSED"></test>
      <test name="svn cp multiple files to a common directory" id="55" result="PASSED"></test>
      <test name="move multiple files within a repo" id="56" result="PASSED"></test>
      <test name="copy multiple files within a repo" id="57" result="PASSED"></test>
      <test name="copy multiple files from a repo to a wc" id="58" result="PASSED"></test>
      <test name="copy multiple files from a wc to a repo" id="59" result="PASSED"></test>
      <test name="copy local files using peg rev syntax" id="60" result="PASSED"></test>
      <test name="copy local dirs using peg rev syntax" id="61" result="PASSED"></test>
      <test name="copy urls using peg rev syntax" id="62" result="PASSED"></test>
      <test name="copy old revision of wc dir to new dir" id="63" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH WC_PATH" id="64" result="PASSED"></test>
      <test name="svn cp --parents URL WC_PATH" id="65" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH URL" id="66" result="PASSED"></test>
      <test name="svn cp --parents URL URL" id="67" result="PASSED"></test>
      <test name="copy a URL that needs URI encoding to WC" id="68" result="PASSED"></test>
      <test name="copy wc in unversioned parent to other wc" id="69" result="PASSED"></test>
      <test name="update receives copy, but local source is replaced" id="70" result="PASSED"></test>
      <test name="copy file into absent dir" id="71" result="PASSED"></test>
    </suite>
    <suite name="depth" total="26" passed="26" failed="0">
      <test name="depth-empty checkout" id="1" result="PASSED"></test>
      <test name="depth-files checkout" id="2" result="PASSED"></test>
      <test name="non-recursive checkout equals depth-files" id="3" result="PASSED"></test>
      <test name="update depth-empty wc shouldn't receive file mod" id="4" result="PASSED"></test>
      <test name="update depth-immediates wc gets top file mod only" id="5" result="PASSED"></test>
      <test name="commit a file from a depth-empty working copy" id="6" result="PASSED"></test>
      <test name="act on a file in a depth-empty working copy" id="7" result="PASSED"></test>
      <test name="bring a dir into a depth-empty working copy" id="8" result="PASSED"></test>
      <test name="bring a file into a depth-immediates working copy" id="9" result="PASSED"></test>
      <test name="bring a dir into a depth-immediates working copy" id="10" result="PASSED"></test>
      <test name="bring a dir into a mixed-depth working copy" id="11" result="PASSED"></test>
      <test name="depth-empty working copy ignores a deletion" id="12" result="PASSED"></test>
      <test name="depth-immediates working copy ignores a deletion" id="13" result="PASSED"></test>
      <test name="depth-immediates working copy receives a deletion" id="14" result="PASSED"></test>
      <test name="gradually update an empty wc to depth=infinity" id="15" result="PASSED"></test>
      <test name="depth-immediates commit subdir propset, update" id="16" result="PASSED"></test>
      <test name="depth-immediates update receives subdir propset" id="17" result="PASSED"></test>
      <test name="commit property mods only, using --depth=empty" id="18" result="PASSED"></test>
      <test name="diff at various depths in non-infinity wc" id="19" result="PASSED"></test>
      <test name="commit some files with --depth=immediates" id="20" result="PASSED"></test>
      <test name="depth-immediates wc receives new directory" id="21" result="PASSED"></test>
      <test name="add multi-subdir tree with --depth=files" id="22" result="PASSED"></test>
      <test name="upgrade a depth=empty wc from above" id="23" result="PASSED"></test>
      <test name="status -u at various depths in non-infinity wc" id="24" result="PASSED"></test>
      <test name="'update -N' above a WC path deleted in repos HEAD" id="25" result="PASSED"></test>
      <test name="depth-empty update on a file doesn't break it" id="26" result="PASSED"></test>
    </suite>
    <suite name="diff" total="48" passed="48" failed="0">
      <test name="update a file" id="1" result="PASSED"></test>
      <test name="add a file" id="2" result="PASSED"></test>
      <test name="add a file in an added directory" id="3" result="PASSED"></test>
      <test name="replace a file with a file" id="4" result="PASSED"></test>
      <test name="multiple revisions diff'd forwards and backwards" id="5" result="PASSED"></test>
      <test name="non-recursive behaviour" id="6" result="PASSED"></test>
      <test name="diff only part of the repository" id="7" result="PASSED"></test>
      <test name="non version controlled files" id="8" result="PASSED"></test>
      <test name="pure repository diff update a file" id="9" result="PASSED"></test>
      <test name="diff when property was changed but text was not" id="10" result="PASSED"></test>
      <test name="don't diff file marked as binary type" id="11" result="PASSED"></test>
      <test name="svn diff errors against a non-existent URL" id="12" result="PASSED"></test>
      <test name="diff against the head of a moved file" id="13" result="PASSED"></test>
      <test name="diff text-bases against repository" id="14" result="PASSED"></test>
      <test name="repos-repos diff on item deleted from HEAD" id="15" result="PASSED"></test>
      <test name="select diff targets" id="16" result="PASSED"></test>
      <test name="diff for branches" id="17" result="PASSED"></test>
      <test name="diff between repos URLs and WC paths" id="18" result="PASSED"></test>
      <test name="diff between two file URLs (issue #1311)" id="19" result="PASSED"></test>
      <test name="diff a property change plus a local edit" id="20" result="PASSED"></test>
      <test name="check for omitted prefix in path component" id="21" result="PASSED"></test>
      <test name="diff a file that has been renamed" id="22" result="PASSED"></test>
      <test name="diff a file within a renamed directory" id="23" result="PASSED"></test>
      <test name="diff a prop change on a dir named explicitly" id="24" result="PASSED"></test>
      <test name="ensure that diff won't show keywords" id="25" result="PASSED"></test>
      <test name="show diffs for binary files with --force" id="26" result="PASSED"></test>
      <test name="scheduled deleted" id="27" result="PASSED"></test>
      <test name="diff a renamed directory" id="28" result="PASSED"></test>
      <test name="diff to BASE with local property mods" id="29" result="PASSED"></test>
      <test name="repos-wc diffs with local svn:mime-type prop mods" id="30" result="PASSED"></test>
      <test name="diff a property change plus a local prop edit" id="31" result="PASSED"></test>
      <test name="repos-wc diff showing added entries with props" id="32" result="PASSED"></test>
      <test name="nonrecursive diff + deleted directories" id="33" result="PASSED"></test>
      <test name="repos-&gt;WORKING diff showing added modifed dir" id="34" result="PASSED"></test>
      <test name="base-&gt;repos diff of moved file" id="35" result="PASSED"></test>
      <test name="wc-&gt;repos diff of added subtree" id="36" result="PASSED"></test>
      <test name="basic diff summarize" id="37" result="PASSED"></test>
      <test name="diff with svn:author that has &lt; in it" id="38" result="PASSED"></test>
      <test name="ignore whitespace when diffing" id="39" result="PASSED"></test>
      <test name="ignore eol styles when diffing" id="40" result="PASSED"></test>
      <test name="diff a revision of a file in a renamed folder" id="41" result="PASSED"></test>
      <test name="test diffs at various depths" id="42" result="PASSED"></test>
      <test name="ignore eol styles when diffing empty lines" id="43" result="PASSED"></test>
      <test name="backward repos-&gt;wc diff with copied file" id="44" result="PASSED"></test>
      <test name="xml diff summarize" id="45" result="PASSED"></test>
      <test name="svn diff --depth=empty FILE_WITH_LOCAL_MODS" id="46" result="PASSED"></test>
      <test name="'svn diff -x wc -r#' should return error" id="47" result="PASSED"></test>
      <test name="svn diff --diff-cmd provides the correct arguments" id="48" result="PASSED"></test>
    </suite>
    <suite name="export" total="16" passed="16" failed="0">
      <test name="export an empty directory" id="1" result="PASSED"></test>
      <test name="export the greek tree" id="2" result="PASSED"></test>
      <test name="attempt to export a nonexistent URL" id="3" result="PASSED"></test>
      <test name="export working copy" id="4" result="PASSED"></test>
      <test name="export working copy with mods" id="5" result="PASSED"></test>
      <test name="export over existing dir" id="6" result="PASSED"></test>
      <test name="export with keyword translation" id="7" result="PASSED"></test>
      <test name="export with eol translation" id="8" result="PASSED"></test>
      <test name="export working copy with keyword translation" id="9" result="PASSED"></test>
      <test name="export working copy with property mods" id="10" result="PASSED"></test>
      <test name="export working copy at base revision" id="11" result="PASSED"></test>
      <test name="export with --native-eol" id="12" result="PASSED"></test>
      <test name="export nonexistent file" id="13" result="PASSED"></test>
      <test name="export unversioned file" id="14" result="PASSED"></test>
      <test name="export with state deleted=true" id="15" result="PASSED"></test>
      <test name="export and create some intermediate folders" id="16" result="PASSED"></test>
    </suite>
    <suite name="externals" total="14" passed="14" failed="0">
      <test name="test checkouts with externals" id="1" result="PASSED"></test>
      <test name="update to receive a new external module" id="2" result="PASSED"></test>
      <test name="update to lose an external module" id="3" result="PASSED"></test>
      <test name="update change to an unmodified external module" id="4" result="PASSED"></test>
      <test name="update changes to a modified external module" id="5" result="PASSED"></test>
      <test name="update changes under an external module" id="6" result="PASSED"></test>
      <test name="commit and update additional externals" id="7" result="PASSED"></test>
      <test name="error if external target dir involves '.' or '..'" id="8" result="PASSED"></test>
      <test name="test exports with externals" id="9" result="PASSED"></test>
      <test name="test exports from working copies with externals" id="10" result="PASSED"></test>
      <test name="use a peg revision to specify an external module" id="11" result="PASSED"></test>
      <test name="check the new '-rN URL PATH' syntax" id="12" result="PASSED"></test>
      <test name="error if propset'ing external with invalid format" id="13" result="PASSED"></test>
      <test name="old 'PATH URL' format should ignore peg revisions" id="14" result="PASSED"></test>
    </suite>
    <suite name="history" total="2" passed="2" failed="0">
      <test name="verify that 'svn cat' traces renames" id="1" result="PASSED"></test>
      <test name="verify that 'svn cat' avoids false identities" id="2" result="PASSED"></test>
    </suite>
    <suite name="import" total="5" passed="5" failed="0">
      <test name="import of executable files" id="1" result="PASSED"></test>
      <test name="do not import ignored files in imported dirs" id="2" result="PASSED"></test>
      <test name="avoid creating empty revisions with import" id="3" result="PASSED"></test>
      <test name="import ignored files in imported dirs" id="4" result="PASSED"></test>
      <test name="import should honor the eol-style property" id="5" result="PASSED"></test>
    </suite>
    <suite name="lock" total="34" passed="34" failed="0">
      <test name="lock a file and verify that it's locked" id="1" result="PASSED"></test>
      <test name="commit a file and keep lock" id="2" result="PASSED"></test>
      <test name="commit a file and release lock" id="3" result="PASSED"></test>
      <test name="commit a locked file with a prop change" id="4" result="PASSED"></test>
      <test name="lock a file and verify lock breaking behavior" id="5" result="PASSED"></test>
      <test name="lock a file and verify lock stealing behavior" id="6" result="PASSED"></test>
      <test name="examine the fields of a lockfile for correctness" id="7" result="PASSED"></test>
      <test name="verify behavior when a lock in a wc is defunct" id="8" result="PASSED"></test>
      <test name="verify svn:needs-lock read-only behavior" id="9" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with defunct lock" id="10" result="PASSED"></test>
      <test name="verify lock removal on a deleted path" id="11" result="PASSED"></test>
      <test name="lock and unlock some files" id="12" result="PASSED"></test>
      <test name="verify removal of a directory with locks inside" id="13" result="PASSED"></test>
      <test name="verify status of lock in working copy" id="14" result="PASSED"></test>
      <test name="verify status of stolen lock" id="15" result="PASSED"></test>
      <test name="verify status of broken lock" id="16" result="PASSED"></test>
      <test name="verify error on locking non-existent file" id="17" result="PASSED"></test>
      <test name="lock an out-of-date file and ensure failure" id="18" result="PASSED"></test>
      <test name="update handles svn:needs-lock correctly" id="19" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with revert" id="20" result="PASSED"></test>
      <test name="examine the fields of a lock from a URL" id="21" result="PASSED"></test>
      <test name="lock/unlock several files in one go" id="22" result="PASSED"></test>
      <test name="lock/unlock switched files" id="23" result="PASSED"></test>
      <test name="lock and unlock a file with an URI-unsafe name" id="24" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part I" id="25" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part II" id="26" result="PASSED"></test>
      <test name="commit file with xml-unsafe name and release lock" id="27" result="PASSED"></test>
      <test name="verify info path@X or path -rY return repos lock" id="28" result="PASSED"></test>
      <test name="(un)lock set of files, one already (un)locked" id="29" result="PASSED"></test>
      <test name="show correct lock info on moved path" id="30" result="PASSED"></test>
      <test name="ls locked path needing URL encoding" id="31" result="PASSED"></test>
      <test name="verify unlocking with wrong lock token" id="32" result="PASSED"></test>
      <test name="verify recursive info shows lock info" id="33" result="PASSED"></test>
      <test name="unlock file locked by other user" id="34" result="PASSED"></test>
    </suite>
    <suite name="log" total="27" passed="27" failed="0">
      <test name="'svn log', no args, top of wc" id="1" result="PASSED"></test>
      <test name="'svn log' on an empty repository" id="2" result="PASSED"></test>
      <test name="'svn log -rN some_dir_unchanged_in_N'" id="3" result="PASSED"></test>
      <test name="'svn log -v -r 1:0 wc_root'" id="4" result="PASSED"></test>
      <test name="'svn log -r COMMITTED' of dynamic/local WC rev" id="5" result="PASSED"></test>
      <test name="'svn log', with args, top of wc" id="6" result="PASSED"></test>
      <test name="'svn log wc_target@N'" id="7" result="PASSED"></test>
      <test name="'svn log target@N' when target removed from HEAD" id="8" result="PASSED"></test>
      <test name="'svn log TGT' with copyfrom history" id="9" result="PASSED"></test>
      <test name="mod_dav_svn must escape invalid XML control chars" id="10" result="PASSED"></test>
      <test name="svn log --xml must not print empty date elements" id="11" result="PASSED"></test>
      <test name="svn log --limit" id="12" result="PASSED"></test>
      <test name="run log on an @BASE target" id="13" result="PASSED"></test>
      <test name="run log with verbose output" id="14" result="PASSED"></test>
      <test name="meta-test for the log parser" id="15" result="PASSED"></test>
      <test name="test 'svn log -g' on a single revision" id="16" result="PASSED"></test>
      <test name="test 'svn log -g' on a branching revision" id="17" result="PASSED"></test>
      <test name="test 'svn log -g' on a non-branching revision" id="18" result="PASSED"></test>
      <test name="test 'svn log -g' a path added before merge" id="19" result="PASSED"></test>
      <test name="test log -c for a single change" id="20" result="PASSED"></test>
      <test name="test log -c on range of changes" id="21" result="PASSED"></test>
      <test name="test log -c on comma-separated list of changes" id="22" result="PASSED"></test>
      <test name="svn log of two wc paths is disallowed" id="23" result="PASSED"></test>
      <test name="test revprop retrieval" id="24" result="PASSED"></test>
      <test name="log --xml escapes non-utf8 data (issue #2866)" id="25" result="PASSED"></test>
      <test name="'svn log -g target_with_bogus_mergeinfo'" id="26" result="PASSED"></test>
      <test name="log -g and explicit mergeinfo replacing inherited" id="27" result="PASSED"></test>
    </suite>
    <suite name="merge" total="99" passed="99" failed="0">
      <test name="performing a merge, with mixed results" id="1" result="PASSED"></test>
      <test name="merge and add new files/dirs with history" id="2" result="PASSED"></test>
      <test name="merge that deletes items" id="3" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -r" id="5" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -c" id="6" result="PASSED"></test>
      <test name="merging a file w/no explicit target path or revs" id="7" result="PASSED"></test>
      <test name="merge should not die if a target file is absent" id="8" result="PASSED"></test>
      <test name="merge on deleted directory in target" id="9" result="PASSED"></test>
      <test name="merging similar trees ancestrally unrelated" id="10" result="PASSED"></test>
      <test name="merge operations using PREV revision" id="11" result="PASSED"></test>
      <test name="merge change into unchanged binary file" id="12" result="PASSED"></test>
      <test name="3-way merge of 'file add' into existing binary" id="13" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -r option" id="14" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -c option" id="15" result="PASSED"></test>
      <test name="merge one file without explicit revisions" id="16" result="PASSED"></test>
      <test name="mark a revision range as merged" id="17" result="PASSED"></test>
      <test name="diff after merge that creates a new file" id="18" result="PASSED"></test>
      <test name="merge should skip over unversioned obstructions" id="19" result="PASSED"></test>
      <test name="merge into missing must not break working copy" id="20" result="PASSED"></test>
      <test name="merge --dry-run adding a new file with props" id="21" result="PASSED"></test>
      <test name="merge binary files with common ancestry" id="22" result="PASSED"></test>
      <test name="merge with funny characters (issue #1905)" id="23" result="PASSED"></test>
      <test name="merge changes to keyword expansion property" id="24" result="PASSED"></test>
      <test name="merge prop change into deleted target" id="25" result="PASSED"></test>
      <test name="merge a file whose name contains a space" id="26" result="PASSED"></test>
      <test name="merge between branches (Issue #2222)" id="27" result="PASSED"></test>
      <test name="property merges don't overwrite existing prop-mods" id="28" result="PASSED"></test>
      <test name="property merge conflict even without local mods" id="29" result="PASSED"></test>
      <test name="undo, then redo a property merge" id="30" result="PASSED"></test>
      <test name="cherry-pick a dependent change, get conflict" id="31" result="PASSED"></test>
      <test name="merge a replacement of a file" id="32" result="PASSED"></test>
      <test name="merge a replacement of a directory" id="33" result="PASSED"></test>
      <test name="replace both dir and one of its children" id="34" result="PASSED"></test>
      <test name="merge a replacement of a file to mixed rev wc" id="35" result="PASSED"></test>
      <test name="merge an added dir on a deleted dir in target" id="36" result="PASSED"></test>
      <test name="ignore whitespace when merging" id="37" result="PASSED"></test>
      <test name="ignore eolstyle when merging" id="38" result="PASSED"></test>
      <test name="conflict from merge of add over versioned file" id="39" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="40" result="PASSED"></test>
      <test name="handle eol-style propchange during merge" id="41" result="PASSED"></test>
      <test name="use inherited mergeinfo to avoid repeated merge" id="42" result="PASSED"></test>
      <test name="use subtree's mergeinfo to avoid repeated merge" id="43" result="PASSED"></test>
      <test name="drive reporter api in depth first order" id="44" result="PASSED"></test>
      <test name="target inherits mergeinfo from nearest ancestor" id="45" result="PASSED"></test>
      <test name="mergeinfo elides to ancestor with identical info" id="46" result="PASSED"></test>
      <test name="discontinuous merges produce correct mergeinfo" id="47" result="PASSED"></test>
      <test name="merge works when target has copied children" id="48" result="PASSED"></test>
      <test name="merge to switched path does not inherit or elide" id="49" result="PASSED"></test>
      <test name="merge to path with switched children" id="50" result="PASSED"></test>
      <test name="merge a change to a file, using relative path" id="51" result="PASSED"></test>
      <test name="mergeinfo can explicitly be empty" id="52" result="PASSED"></test>
      <test name="merge adding prop to child of merge target works" id="53" result="PASSED"></test>
      <test name="set no mergeinfo when merging from foreign repos" id="54" result="PASSED"></test>
      <test name="avoid repeated merges for cyclic merging" id="55" result="PASSED"></test>
      <test name="update does not merge mergeinfo" id="56" result="PASSED"></test>
      <test name="merge should merge mergeinfo" id="57" result="PASSED"></test>
      <test name="replace-style merge capability for a single file" id="58" result="PASSED"></test>
      <test name="merge to ood path can lead to inaccurate mergeinfo" id="59" result="PASSED"></test>
      <test name="merge test for --depth files" id="60" result="PASSED"></test>
      <test name="merge fails if subtree is deleted on src" id="61" result="PASSED"></test>
      <test name="subtrees can lose non-inheritable ranges" id="62" result="PASSED"></test>
      <test name="merge to sparse directories" id="63" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed dir" id="64" result="PASSED"></test>
      <test name="child having different rev ranges to merge" id="65" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed file" id="66" result="PASSED"></test>
      <test name="merge with auto detection of revision ranges" id="67" result="PASSED"></test>
      <test name="mergeinfo recording in skipped merge" id="68" result="PASSED"></test>
      <test name="command line supports cherry picked merge ranges" id="69" result="PASSED"></test>
      <test name="merge of propchange on subdir raises conflict" id="70" result="PASSED"></test>
      <test name="reverse merge of prop add on child" id="71" result="PASSED"></test>
      <test name="merge target with non inheritable mergeinfo" id="72" result="PASSED"></test>
      <test name="revert a commit on a target" id="73" result="PASSED"></test>
      <test name="--ignore-ancestry also ignores mergeinfo" id="74" result="PASSED"></test>
      <test name="merge from renamed branch" id="75" result="PASSED"></test>
      <test name="normalized mergeinfo is recorded on subtrees" id="76" result="PASSED"></test>
      <test name="subtrees added after start of merge range are ok" id="77" result="PASSED"></test>
      <test name="basic merge --reintegrate support" id="78" result="PASSED"></test>
      <test name="merge --reintegrate with renamed file on branch" id="79" result="PASSED"></test>
      <test name="merge --reintegrate on a never-updated branch" id="80" result="PASSED"></test>
      <test name="merge --reintegrate should fail in modified wc" id="81" result="PASSED"></test>
      <test name="merge --reintegrate should fail in mixed-rev wc" id="82" result="PASSED"></test>
      <test name="merge --reintegrate should fail in switched wc" id="83" result="PASSED"></test>
      <test name="merge --reintegrate should fail in shallow wc" id="84" result="PASSED"></test>
      <test name="merge --reintegrate should fail on stale source" id="85" result="PASSED"></test>
      <test name="cyclic merges dont add mergeinfo from own history" id="86" result="PASSED"></test>
      <test name="merge range predates history (issue #3094)" id="87" result="PASSED"></test>
      <test name="merge from a foreign repository" id="88" result="PASSED"></test>
      <test name="2-url merge from a foreign repository" id="89" result="PASSED"></test>
      <test name="merging an unknown url should return error" id="90" result="PASSED"></test>
      <test name="merges that remove all mergeinfo work" id="91" result="PASSED"></test>
      <test name="dont merge revs into a subtree that predate it" id="92" result="PASSED"></test>
      <test name="don't explicitly record implicit mergeinfo" id="93" result="PASSED"></test>
      <test name="merge with broken symlinks in target" id="94" result="PASSED"></test>
      <test name="subtree ranges might not intersect with target" id="95" result="PASSED"></test>
      <test name="merge fails with renamed subtrees with mergeinfo" id="96" result="PASSED"></test>
      <test name="subtree merge source might not exist" id="97" result="PASSED"></test>
      <test name="mergeinfo not set on subtree with empty mergeinfo" id="98" result="PASSED"></test>
      <test name="subtree merges dont cause spurious conflicts" id="100" result="PASSED"></test>
      <test name="target and subtrees need nonintersecting revs" id="101" result="PASSED"></test>
    </suite>
    <suite name="merge_authz" total="0" passed="0" failed="0">
    </suite>
    <suite name="mergeinfo" total="5" passed="5" failed="0">
      <test name="'mergeinfo' on a URL that lacks mergeinfo" id="1" result="PASSED"></test>
      <test name="'mergeinfo' on a path with mergeinfo" id="2" result="PASSED"></test>
      <test name="'mergeinfo' with source selection" id="3" result="PASSED"></test>
      <test name="'mergeinfo' with uninteresting source selection" id="4" result="PASSED"></test>
      <test name="mergeinfo of an unknown url should return error" id="5" result="PASSED"></test>
    </suite>
    <suite name="prop" total="26" passed="26" failed="0">
      <test name="write/read props in wc only (ps, pl, pdel, pe)" id="1" result="PASSED"></test>
      <test name="commit properties" id="2" result="PASSED"></test>
      <test name="receive properties via update" id="3" result="PASSED"></test>
      <test name="receive property changes as part of a downdate" id="4" result="PASSED"></test>
      <test name="commit the removal of props" id="5" result="PASSED"></test>
      <test name="update with conflicting props" id="6" result="PASSED"></test>
      <test name="commit with conflicting dirprops" id="7" result="PASSED"></test>
      <test name="props work when committing a replacement" id="8" result="PASSED"></test>
      <test name="props work when reverting a replacement" id="9" result="PASSED"></test>
      <test name="try to set inappropriate props" id="10" result="PASSED"></test>
      <test name="file copies inherit (not re-derive) special props" id="11" result="PASSED"></test>
      <test name="set, get, and delete a revprop change" id="12" result="PASSED"></test>
      <test name="some svn: properties should be converted" id="13" result="PASSED"></test>
      <test name="test binary property support" id="14" result="PASSED"></test>
      <test name="recursive property operations in BASE and WC" id="15" result="PASSED"></test>
      <test name="property operations on an URL" id="16" result="PASSED"></test>
      <test name="removal of schedule added file with properties" id="17" result="PASSED"></test>
      <test name="receive properties on the wc root via update" id="18" result="PASSED"></test>
      <test name="test properties on replaced files" id="19" result="PASSED"></test>
      <test name="test proplist at various depths on a wc" id="20" result="PASSED"></test>
      <test name="test proplist at various depths on a url" id="21" result="PASSED"></test>
      <test name="test prop* handle invalid property names" id="22" result="PASSED"></test>
      <test name="issue #2581: propset shouldn't touch symlink perms" id="23" result="PASSED"></test>
      <test name="remove a property with a custom namespace" id="24" result="PASSED"></test>
      <test name="property retrieval with peg and operative revs" id="25" result="PASSED"></test>
      <test name="test handling invalid svn:* property values" id="26" result="PASSED"></test>
    </suite>
    <suite name="revert" total="18" passed="18" failed="0">
      <test name="revert relative to wc root" id="1" result="PASSED"></test>
      <test name="revert reexpands manually contracted keyword" id="2" result="PASSED"></test>
      <test name="revert a replaced file with no properties" id="3" result="PASSED"></test>
      <test name="revert a moved file" id="4" result="PASSED"></test>
      <test name="revert svn cp PATH PATH replace file with props" id="5" result="PASSED"></test>
      <test name="revert a merge replacement of file with history" id="6" result="PASSED"></test>
      <test name="revert svn cp URL PATH replace file with props" id="7" result="PASSED"></test>
      <test name="revert file after second replace" id="8" result="PASSED"></test>
      <test name="revert after manual text-conflict resolution" id="9" result="PASSED"></test>
      <test name="revert after manual property-conflict resolution" id="10" result="PASSED"></test>
      <test name="revert a simple propset on a dir" id="11" result="PASSED"></test>
      <test name="revert a simple propset on a file" id="12" result="PASSED"></test>
      <test name="revert a simple propdel on a dir" id="13" result="PASSED"></test>
      <test name="revert a simple propdel on a file" id="14" result="PASSED"></test>
      <test name="revert a committed replace-with-history == no-op" id="15" result="PASSED"></test>
      <test name="status after schedule-delete, revert, and local rm" id="16" result="PASSED"></test>
      <test name="status after replace+, revert, and local rm" id="17" result="PASSED"></test>
      <test name="reverted replace with history restores checksum" id="18" result="PASSED"></test>
    </suite>
    <suite name="schedule" total="13" passed="13" failed="0">
      <test name="revert: add some files" id="1" result="PASSED"></test>
      <test name="revert: add some directories" id="2" result="PASSED"></test>
      <test name="revert: add some nested files and directories" id="3" result="PASSED"></test>
      <test name="revert: add some executable files" id="4" result="PASSED"></test>
      <test name="revert: delete some files" id="5" result="PASSED"></test>
      <test name="revert: delete some directories" id="6" result="PASSED"></test>
      <test name="unschedule addition on missing items" id="7" result="PASSED"></test>
      <test name="schedule and commit deletion on missing items" id="8" result="PASSED"></test>
      <test name="revert inside a newly added dir" id="9" result="PASSED"></test>
      <test name="status after add of deleted directory" id="10" result="PASSED"></test>
      <test name="'svn add' should traverse already-versioned dirs" id="11" result="PASSED"></test>
      <test name="'svn mkdir' should clean up after itself on error" id="12" result="PASSED"></test>
      <test name="'svn rm non-existent' should exit with an error" id="13" result="PASSED"></test>
    </suite>
    <suite name="special" total="14" passed="14" failed="0">
      <test name="general symlink handling" id="1" result="PASSED"></test>
      <test name="replace a normal file with a special file" id="2" result="PASSED"></test>
      <test name="import and export a symlink" id="3" result="PASSED"></test>
      <test name="'svn cp dir1 dir2' which contains a symlink" id="4" result="PASSED"></test>
      <test name="replace a special file with a non-special file" id="5" result="PASSED"></test>
      <test name="remove a symlink" id="6" result="PASSED"></test>
      <test name="merge symlink into file" id="7" result="PASSED"></test>
      <test name="merge file into symlink" id="8" result="PASSED"></test>
      <test name="checkout a repository containing symlinks" id="9" result="PASSED"></test>
      <test name="diff a symlink to a directory" id="10" result="PASSED"></test>
      <test name="checkout repository with unknown special file type" id="11" result="PASSED"></test>
      <test name="replace a special file with a directory" id="12" result="PASSED"></test>
      <test name="symlink obstructs incoming delete" id="13" result="PASSED"></test>
      <test name="warn when attempt operation on a reserved name" id="14" result="PASSED"></test>
    </suite>
    <suite name="stat" total="30" passed="30" failed="0">
      <test name="status on unversioned file in current directory" id="1" result="PASSED"></test>
      <test name="run 'status -u' when nested additions are pending" id="2" result="PASSED"></test>
      <test name="status -vN shows all items in current directory" id="3" result="PASSED"></test>
      <test name="status with a versioned file missing" id="4" result="PASSED"></test>
      <test name="status on versioned items whose type has changed" id="5" result="PASSED"></test>
      <test name="status on versioned items replaced by symlinks" id="6" result="PASSED"></test>
      <test name="status -u with new files in the repository" id="7" result="PASSED"></test>
      <test name="status for unignored file and directory" id="8" result="PASSED"></test>
      <test name="status on missing and unversioned file" id="9" result="PASSED"></test>
      <test name="status -u indicates out-of-dateness" id="10" result="PASSED"></test>
      <test name="status -u on outdated, added file shows only that" id="11" result="PASSED"></test>
      <test name="status -u on working copy deleted in HEAD" id="12" result="PASSED"></test>
      <test name="timestamp behaviour" id="13" result="PASSED"></test>
      <test name="status on '..' where '..' is not versioned" id="14" result="PASSED"></test>
      <test name="status -u in partially non-recursive wc" id="15" result="PASSED"></test>
      <test name="a missing dir in the anchor" id="16" result="PASSED"></test>
      <test name="status output in XML format" id="17" result="PASSED"></test>
      <test name="status on ignored directory" id="18" result="PASSED"></test>
      <test name="status on unversioned dir (issue 2030)" id="19" result="PASSED"></test>
      <test name="status with a versioned directory missing" id="20" result="PASSED"></test>
      <test name="status -v -N -u from different current directories" id="21" result="PASSED"></test>
      <test name="status on conflicted added file" id="22" result="PASSED"></test>
      <test name="status with inconsistent eol style" id="23" result="PASSED"></test>
      <test name="run 'status -u' variations w/ incoming propchanges" id="24" result="PASSED"></test>
      <test name="run 'status -uv' w/ incoming propchanges" id="25" result="PASSED"></test>
      <test name="run 'status -uN' with incoming changes" id="26" result="PASSED"></test>
      <test name="run 'status -u' with locally deleted directories" id="27" result="PASSED"></test>
      <test name="run 'status --depth=X' with local changes" id="28" result="PASSED"></test>
      <test name="run 'status --depth=X -u' with incoming changes" id="29" result="PASSED"></test>
      <test name="status -u on versioned items whose type changed" id="30" result="PASSED"></test>
    </suite>
    <suite name="svnadmin" total="15" passed="15" failed="0">
      <test name="loading of dumpstream with extra headers" id="1" result="PASSED"></test>
      <test name="load success on oversized Content-length" id="2" result="PASSED"></test>
      <test name="load failure on undersized Content-length" id="3" result="PASSED"></test>
      <test name="preserve date-less revisions in load (issue #2729)" id="4" result="PASSED"></test>
      <test name="'svnadmin dump' on copied directory" id="5" result="PASSED"></test>
      <test name="'svnadmin dump' on modified child of copied dir" id="6" result="PASSED"></test>
      <test name="'svnadmin dump --quiet'" id="7" result="PASSED"></test>
      <test name="'setlog' and 'setrevprop', bypassing hooks'" id="10" result="PASSED"></test>
      <test name="verify a repository containing paths like 'c:hi'" id="11" result="PASSED"></test>
      <test name="svnadmin verify detects corruption dump can't" id="12" result="PASSED"></test>
      <test name="recover a repository (FSFS only)" id="13" result="PASSED"></test>
      <test name="'svnadmin load --parent-dir' reparents mergeinfo" id="14" result="PASSED"></test>
      <test name="test 'svnadmin setuuid'" id="15" result="PASSED"></test>
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="16" result="PASSED"></test>
      <test name="'svnadmin create /path/to/repo/subdir'" id="17" result="PASSED"></test>
    </suite>
    <suite name="svnlook" total="10" passed="10" failed="0">
      <test name="test miscellaneous svnlook features" id="1" result="PASSED"></test>
      <test name="delete file in moved dir" id="2" result="PASSED"></test>
      <test name="test the printing of property diffs" id="3" result="PASSED"></test>
      <test name="svnlook info must allow inconsistent newlines" id="4" result="PASSED"></test>
      <test name="test --copy-info flag on the changed command" id="5" result="PASSED"></test>
      <test name="test 'svnlook tree --non-recursive'" id="6" result="PASSED"></test>
      <test name="history --limit" id="7" result="PASSED"></test>
      <test name="test 'svnlook diff -x -b' and 'svnlook diff -x -w'" id="8" result="PASSED"></test>
      <test name="test 'svnlook diff -x --ignore-eol-style'" id="9" result="PASSED"></test>
      <test name="test 'svnlook diff' on binary files" id="10" result="PASSED"></test>
    </suite>
    <suite name="svnsync" total="19" passed="19" failed="0">
      <test name="copy and modify" id="1" result="PASSED"></test>
      <test name="copy from previous version and modify" id="2" result="PASSED"></test>
      <test name="copy from previous version" id="3" result="PASSED"></test>
      <test name="modified in place" id="4" result="PASSED"></test>
      <test name="tag empty trunk" id="5" result="PASSED"></test>
      <test name="tag trunk containing a sub-directory" id="6" result="PASSED"></test>
      <test name="tag trunk containing a file (#2)" id="7" result="PASSED"></test>
      <test name="tag trunk containing a file" id="8" result="PASSED"></test>
      <test name="tag with a modified file" id="9" result="PASSED"></test>
      <test name="directory property changes" id="10" result="PASSED"></test>
      <test name="files and dirs mixed together" id="11" result="PASSED"></test>
      <test name="copy parent and modify prop" id="12" result="PASSED"></test>
      <test name="detect non-svnsync commits in destination" id="13" result="PASSED"></test>
      <test name="test url encoding issues" id="18" result="PASSED"></test>
      <test name="test copying revs with no svn:author revprops" id="19" result="PASSED"></test>
      <test name="test copying revprops other than svn:*" id="20" result="PASSED"></test>
      <test name="test syncing subdirectories" id="21" result="PASSED"></test>
      <test name="test syncing subdirectories with changes on root" id="22" result="PASSED"></test>
      <test name="test move parent and modify child file in same rev" id="23" result="PASSED"></test>
    </suite>
    <suite name="svndumpfilter" total="2" passed="2" failed="0">
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="1" result="PASSED"></test>
      <test name="svndumpfilter loses mergeinfo" id="2" result="PASSED"></test>
    </suite>
    <suite name="svnversion" total="2" passed="2" failed="0">
      <test name="test 'svnversion' on wc and other dirs" id="1" result="PASSED"></test>
      <test name="test 'svnversion' with svn:externals" id="2" result="PASSED"></test>
    </suite>
    <suite name="switch" total="29" passed="29" failed="0">
      <test name="test some basic switching operations" id="1" result="PASSED"></test>
      <test name="commits after some basic switching operations" id="2" result="PASSED"></test>
      <test name="update wc that contains switched things" id="3" result="PASSED"></test>
      <test name="reverse update wc that contains switched things" id="4" result="PASSED"></test>
      <test name="update switched wc things to HEAD" id="5" result="PASSED"></test>
      <test name="reverse update switched wc things to an older rev" id="6" result="PASSED"></test>
      <test name="show logs for a switched file" id="7" result="PASSED"></test>
      <test name="relocate with deleted, missing and copied entries" id="8" result="PASSED"></test>
      <test name="switch that deletes a sub-directory" id="9" result="PASSED"></test>
      <test name="switch a file to a dir and back to the file" id="10" result="PASSED"></test>
      <test name="non-recursive switch" id="11" result="PASSED"></test>
      <test name="anchor=target that fails due to local mods" id="12" result="PASSED"></test>
      <test name="bad intermediate urls in use" id="13" result="PASSED"></test>
      <test name="obstructed switch" id="14" result="PASSED"></test>
      <test name="commit with mods below switch" id="15" result="PASSED"></test>
      <test name="relocate with prefixes longer than repo root" id="16" result="PASSED"></test>
      <test name="refresh the WC file system read-only attribute " id="17" result="PASSED"></test>
      <test name="switch shouldn't allow changing repos root" id="18" result="PASSED"></test>
      <test name="out of date propset should fail after a relocate" id="19" result="PASSED"></test>
      <test name="forced switch tolerates obstructions to adds" id="20" result="PASSED"></test>
      <test name="forced switch fails with some types of obstuctions" id="21" result="PASSED"></test>
      <test name="switch a scheduled-add file" id="22" result="PASSED"></test>
      <test name="mergeinfo does not elide post switch" id="23" result="PASSED"></test>
      <test name="switch tolerates WC adds" id="24" result="PASSED"></test>
      <test name="basic tests to verify switch along with depth" id="25" result="PASSED"></test>
      <test name="switch to dir@peg where dir doesn't exist in HEAD" id="26" result="PASSED"></test>
      <test name="switch file and dir to url containing spaces" id="27" result="PASSED"></test>
      <test name="switch to old rev of now renamed branch" id="28" result="PASSED"></test>
      <test name="switch a folder to the root of its repository" id="29" result="PASSED"></test>
    </suite>
    <suite name="trans" total="8" passed="8" failed="0">
      <test name="commit new files with keywords active from birth" id="1" result="PASSED"></test>
      <test name="update modified file with eol-style 'native'" id="2" result="PASSED"></test>
      <test name="committing eol-style change forces text send" id="3" result="PASSED"></test>
      <test name="keyword expansion for lone file in directory" id="4" result="PASSED"></test>
      <test name="keyword expanded on cat" id="5" result="PASSED"></test>
      <test name="copy, propset svn:eol-style, commit" id="6" result="PASSED"></test>
      <test name="propset, commit, check out into another wc" id="7" result="PASSED"></test>
      <test name="propset, revert" id="8" result="PASSED"></test>
    </suite>
    <suite name="update" total="43" passed="43" failed="0">
      <test name="update a locally-modified binary file" id="1" result="PASSED"></test>
      <test name="update to an old revision of a binary files" id="2" result="PASSED"></test>
      <test name="update should not munge adds or replaces" id="3" result="PASSED"></test>
      <test name="update to revision 0" id="4" result="PASSED"></test>
      <test name="overlapping identical changes should not conflict" id="5" result="PASSED"></test>
      <test name="delete files and update to resolve text conflicts" id="6" result="PASSED"></test>
      <test name="update that deletes modified files" id="7" result="PASSED"></test>
      <test name="update after add/rm of deleted state" id="8" result="PASSED"></test>
      <test name="update missing items (by name) in working copy" id="9" result="PASSED"></test>
      <test name="update that replaces a directory" id="10" result="PASSED"></test>
      <test name="update with explicit file target" id="11" result="PASSED"></test>
      <test name="receive prop update to file scheduled for deletion" id="12" result="PASSED"></test>
      <test name="bail when receive a file or dir named .svn" id="13" result="PASSED"></test>
      <test name="update missing dir to rev in which it is absent" id="14" result="PASSED"></test>
      <test name="another 'hudson' problem: updates that delete" id="15" result="PASSED"></test>
      <test name="explicit update of deleted=true targets" id="16" result="PASSED"></test>
      <test name="receive new dir with spaces in its name" id="17" result="PASSED"></test>
      <test name="non-recursive update" id="18" result="PASSED"></test>
      <test name="check out an empty dir" id="19" result="PASSED"></test>
      <test name="update target till it's gone, then get it back" id="20" result="PASSED"></test>
      <test name="update child before parent of a deleted tree" id="21" result="PASSED"></test>
      <test name="update a schedule-add directory" id="22" result="PASSED"></test>
      <test name="update target that was added in a future rev" id="23" result="PASSED"></test>
      <test name="update a nested wc in a read-only wc" id="24" result="PASSED"></test>
      <test name="obstructed update alters WC properties" id="25" result="PASSED"></test>
      <test name="update dir with xml-unsafe name" id="26" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="27" result="PASSED"></test>
      <test name="handle eol-style propchange during update" id="28" result="PASSED"></test>
      <test name="update schedule-add copy of old rev" id="29" result="PASSED"></test>
      <test name="forced update tolerates obstructions to adds" id="30" result="PASSED"></test>
      <test name="forced up fails with some types of obstructions" id="31" result="PASSED"></test>
      <test name="update wc containing a replaced-with-history file" id="33" result="PASSED"></test>
      <test name="update handles obstructing paths scheduled for add" id="34" result="PASSED"></test>
      <test name="update conflicted files" id="35" result="PASSED"></test>
      <test name="mergeinfo does not elide after update" id="36" result="PASSED"></test>
      <test name="update should make use of copyfrom args" id="37" result="PASSED"></test>
      <test name="update degrades well if copyfrom_path unavailable" id="38" result="PASSED"></test>
      <test name="update uses copyfrom &amp; accepts further txdeltas" id="39" result="PASSED"></test>
      <test name="update chooses right copyfrom for double move" id="40" result="PASSED"></test>
      <test name="updating a copied file with a deleted property" id="41" result="PASSED"></test>
      <test name="update --accept automatic conflict resolution" id="42" result="PASSED"></test>
      <test name="eof in interactive resolution can't break wc" id="43" result="PASSED"></test>
      <test name="update fails when repos uuid changed" id="44" result="PASSED"></test>
    </suite>
  </server>
  <server name="svnserve" url="svn://localhost:48110">
    <suite name="authz" total="14" passed="14" failed="0">
      <test name="authz issue #2486 - open root" id="1" result="PASSED"></test>
      <test name="authz issue #2486 - open directory" id="2" result="PASSED"></test>
      <test name="broken authz files cause errors" id="3" result="PASSED"></test>
      <test name="test authz for read operations" id="4" result="PASSED"></test>
      <test name="test authz for write operations" id="5" result="PASSED"></test>
      <test name="test authz for checkout" id="6" result="PASSED"></test>
      <test name="test authz for log and tracing path changes" id="7" result="PASSED"></test>
      <test name="test authz for checkout and update" id="8" result="PASSED"></test>
      <test name="test authz for export with unreadable subfolder" id="9" result="PASSED"></test>
      <test name="test authz for aliases" id="10" result="PASSED"></test>
      <test name="test the authz validation rules" id="11" result="PASSED"></test>
      <test name="test authz for locking" id="12" result="PASSED"></test>
      <test name="authz issue #2712" id="13" result="PASSED"></test>
      <test name="switched to directory, no read access on parents" id="14" result="PASSED"></test>
    </suite>
    <suite name="autoprop" total="14" passed="14" failed="0">
      <test name="add: config=no,  commandline=none" id="1" result="PASSED"></test>
      <test name="add: config=yes, commandline=none" id="2" result="PASSED"></test>
      <test name="add: config=no,  commandline=yes" id="3" result="PASSED"></test>
      <test name="add: config=yes, commandline=yes" id="4" result="PASSED"></test>
      <test name="add: config=no,  commandline=no" id="5" result="PASSED"></test>
      <test name="add: config=yes, commandline=no" id="6" result="PASSED"></test>
      <test name="import: config=no,  commandline=none" id="7" result="PASSED"></test>
      <test name="import: config=yes, commandline=none" id="8" result="PASSED"></test>
      <test name="import: config=no,  commandline=yes" id="9" result="PASSED"></test>
      <test name="import: config=yes, commandline=yes" id="10" result="PASSED"></test>
      <test name="import: config=no,  commandline=no" id="11" result="PASSED"></test>
      <test name="import: config=yes, commandline=no" id="12" result="PASSED"></test>
      <test name="add directory" id="13" result="PASSED"></test>
      <test name="import directory" id="14" result="PASSED"></test>
    </suite>
    <suite name="basic" total="40" passed="40" failed="0">
      <test name="basic checkout of a wc" id="1" result="PASSED"></test>
      <test name="basic status command" id="2" result="PASSED"></test>
      <test name="basic commit command" id="3" result="PASSED"></test>
      <test name="basic update command" id="4" result="PASSED"></test>
      <test name="basic mkdir URL" id="5" result="PASSED"></test>
      <test name="basic mkdir URL, including parent directories" id="6" result="PASSED"></test>
      <test name="basic mkdir, including parent directories" id="7" result="PASSED"></test>
      <test name="basic corruption detection" id="8" result="PASSED"></test>
      <test name="receiving text merges as part of an update" id="9" result="PASSED"></test>
      <test name="basic conflict creation and resolution" id="10" result="PASSED"></test>
      <test name="basic cleanup command" id="11" result="PASSED"></test>
      <test name="basic revert command" id="12" result="PASSED"></test>
      <test name="basic switch command" id="13" result="PASSED"></test>
      <test name="basic delete command" id="14" result="PASSED"></test>
      <test name="checkout a path no longer in HEAD" id="15" result="PASSED"></test>
      <test name="attempt to change node kind" id="16" result="PASSED"></test>
      <test name="basic import of single new file" id="17" result="PASSED"></test>
      <test name="basic cat of files" id="18" result="PASSED"></test>
      <test name="basic ls" id="19" result="PASSED"></test>
      <test name="'svn log file:///nonexistent_path' should fail" id="20" result="PASSED"></test>
      <test name="basic auth caching" id="21" result="PASSED"></test>
      <test name="ignored files in added dirs should not be added" id="22" result="PASSED"></test>
      <test name="test add --parents" id="23" result="PASSED"></test>
      <test name="make sure URI syntaxes are parsed correctly" id="24" result="PASSED"></test>
      <test name="trying to check out a file should fail" id="25" result="PASSED"></test>
      <test name="basic info command" id="26" result="PASSED"></test>
      <test name="ignore files matching local ignores in added dirs" id="27" result="PASSED"></test>
      <test name="add ignored files in added dirs" id="28" result="PASSED"></test>
      <test name="check that repos root gets set on checkout" id="29" result="PASSED"></test>
      <test name="checks peg revision on filename with @ sign" id="30" result="PASSED"></test>
      <test name="info on file not existing in HEAD" id="31" result="PASSED"></test>
      <test name="ls a path no longer in HEAD" id="32" result="PASSED"></test>
      <test name="cat added file using -rPREV" id="33" result="PASSED"></test>
      <test name="basic ls of repos with space in name" id="34" result="PASSED"></test>
      <test name="delete file and directory with --keep-local" id="35" result="PASSED"></test>
      <test name="use folders with names like 'c:hi'" id="36" result="PASSED"></test>
      <test name="remotely remove directories from one repository" id="37" result="PASSED"></test>
      <test name="remotely remove directories from two repositories" id="38" result="PASSED"></test>
      <test name="automatic conflict resolution" id="39" result="PASSED"></test>
      <test name="get info on a file not in the repo" id="40" result="PASSED"></test>
    </suite>
    <suite name="blame" total="13" passed="13" failed="0">
      <test name="annotate a file whose name contains a space" id="1" result="PASSED"></test>
      <test name="annotate a binary file" id="2" result="PASSED"></test>
      <test name="annotating a directory not allowed" id="3" result="PASSED"></test>
      <test name="blame output in XML format" id="4" result="PASSED"></test>
      <test name="blame lines from unknown revisions" id="5" result="PASSED"></test>
      <test name="blame targets with peg-revisions" id="6" result="PASSED"></test>
      <test name="blame with different eol styles" id="7" result="PASSED"></test>
      <test name="ignore whitespace when blaming" id="8" result="PASSED"></test>
      <test name="ignore eol styles when blaming" id="9" result="PASSED"></test>
      <test name="test 'svn blame -g'" id="10" result="PASSED"></test>
      <test name="don't look for merged files out of range" id="11" result="PASSED"></test>
      <test name="blame target not in HEAD with peg-revisions" id="12" result="PASSED"></test>
      <test name="blame target not in HEAD" id="13" result="PASSED"></test>
    </suite>
    <suite name="cat" total="5" passed="5" failed="0">
      <test name="cat a local directory" id="1" result="PASSED"></test>
      <test name="cat a remote directory" id="2" result="PASSED"></test>
      <test name="cat a file at revision BASE" id="3" result="PASSED"></test>
      <test name="cat a nonexistent file" id="4" result="PASSED"></test>
      <test name="cat should skip uncattable resources" id="5" result="PASSED"></test>
    </suite>
    <suite name="changelist" total="8" passed="8" failed="0">
      <test name="add and remove files from changelists" id="1" result="PASSED"></test>
      <test name="commit with single --changelist" id="2" result="PASSED"></test>
      <test name="commit with multiple --changelist's" id="3" result="PASSED"></test>
      <test name="info --changelist" id="4" result="PASSED"></test>
      <test name="diff --changelist (wc-wc and repos-wc)" id="5" result="PASSED"></test>
      <test name="propset/del/get --changelist" id="6" result="PASSED"></test>
      <test name="revert --changelist" id="7" result="PASSED"></test>
      <test name="update --changelist" id="8" result="PASSED"></test>
    </suite>
    <suite name="checkout" total="13" passed="13" failed="0">
      <test name="co with obstructions should fail without --force" id="1" result="PASSED"></test>
      <test name="forced co fails if a dir obstructs a file" id="2" result="PASSED"></test>
      <test name="forced co fails if a file obstructs a dir" id="3" result="PASSED"></test>
      <test name="co with faux obstructions ok with --force" id="4" result="PASSED"></test>
      <test name="co with real obstructions ok with --force" id="5" result="PASSED"></test>
      <test name="co with real obstructions and unversioned files" id="6" result="PASSED"></test>
      <test name="forced co with versioned obstruction" id="7" result="PASSED"></test>
      <test name="import and checkout" id="8" result="PASSED"></test>
      <test name="checkout file with broken eol style" id="9" result="PASSED"></test>
      <test name="checkout and create some intermediate folders" id="10" result="PASSED"></test>
      <test name="checkout with peg revision" id="11" result="PASSED"></test>
      <test name="checkout with peg revision date" id="12" result="PASSED"></test>
      <test name="co handles obstructing paths scheduled for add" id="13" result="PASSED"></test>
    </suite>
    <suite name="commit" total="56" passed="56" failed="0">
      <test name="commit one file" id="1" result="PASSED"></test>
      <test name="commit one newly added file" id="2" result="PASSED"></test>
      <test name="commit one newly added binary file" id="3" result="PASSED"></test>
      <test name="commit multiple targets" id="4" result="PASSED"></test>
      <test name="commit multiple targets, 2nd variation" id="5" result="PASSED"></test>
      <test name="commit wc_dir/A/D -- includes D. (anchor=A, tgt=D)" id="6" result="PASSED"></test>
      <test name="commit wc_dir -- (anchor=wc_dir, tgt={})" id="7" result="PASSED"></test>
      <test name="committing unversioned object produces error" id="8" result="PASSED"></test>
      <test name="replace two nested dirs, verify empty contents" id="9" result="PASSED"></test>
      <test name="hudson prob 1.0:  delete file, commit, update" id="10" result="PASSED"></test>
      <test name="hudson prob 1.1:  delete dir, commit, update" id="11" result="PASSED"></test>
      <test name="hudson prob 1.2:  delete, commit, re-add, commit" id="12" result="PASSED"></test>
      <test name="hudson prob 2.0:  prop commit on old dir fails" id="13" result="PASSED"></test>
      <test name="hudson prob 2.1:  move files, update empty dir" id="14" result="PASSED"></test>
      <test name="hook testing" id="15" result="PASSED"></test>
      <test name="commit mixed-rev wc (no erroneous merge error)" id="16" result="PASSED"></test>
      <test name="commit files and dirs with URI-unsafe characters" id="17" result="PASSED"></test>
      <test name="commit deleted yet edited files" id="18" result="PASSED"></test>
      <test name="commit a file inside dir scheduled for addition" id="19" result="PASSED"></test>
      <test name="commit deleted (and missing) file" id="20" result="PASSED"></test>
      <test name="issue 644 attempt to add a file twice" id="21" result="PASSED"></test>
      <test name="commit from a dir with a longer name than the wc" id="22" result="PASSED"></test>
      <test name="try to commit when directory is locked" id="23" result="PASSED"></test>
      <test name="commit the current directory" id="24" result="PASSED"></test>
      <test name="attempted commit from multiple wc fails" id="25" result="PASSED"></test>
      <test name="commit named targets with -N (issues #1195, #1239)" id="26" result="PASSED"></test>
      <test name="commit with conflicts and check txn in repo" id="27" result="PASSED"></test>
      <test name="commit deletion of out-of-date file or dir" id="28" result="PASSED"></test>
      <test name="commit with a log message containing bad data" id="29" result="PASSED"></test>
      <test name="commit with invalid external editor cmd" id="30" result="PASSED"></test>
      <test name="commit with mods in schedule delete" id="31" result="PASSED"></test>
      <test name="tabs in paths" id="32" result="PASSED"></test>
      <test name="local ops should not be treated like commits" id="33" result="PASSED"></test>
      <test name="post commit hook failure case testing" id="34" result="PASSED"></test>
      <test name="commit two targets, both the same folder" id="35" result="PASSED"></test>
      <test name="commit files with inconsistent eol should fail" id="36" result="PASSED"></test>
      <test name="set revision props during remote mkdir" id="37" result="PASSED"></test>
      <test name="set revision props during remote delete" id="38" result="PASSED"></test>
      <test name="set revision props during commit" id="39" result="PASSED"></test>
      <test name="set revision props during import" id="40" result="PASSED"></test>
      <test name="set revision props during repos-to-repos copy" id="41" result="PASSED"></test>
      <test name="set revision props during wc-to-repos copy" id="42" result="PASSED"></test>
      <test name="set revision props during repos-to-repos move" id="43" result="PASSED"></test>
      <test name="set revision props during remote property edit" id="44" result="PASSED"></test>
      <test name="set multiple revision props during remote mkdir" id="45" result="PASSED"></test>
      <test name="set revprop without value ('') during remote mkdir" id="46" result="PASSED"></test>
      <test name="set revprop without '=' during remote mkdir" id="47" result="PASSED"></test>
      <test name="set invalid revision props during remote mkdir" id="48" result="PASSED"></test>
      <test name="start-commit hook failure case testing" id="49" result="PASSED"></test>
      <test name="pre-commit hook failure case testing" id="50" result="PASSED"></test>
      <test name="'svn commit -F foo' when foo is a versioned file" id="51" result="PASSED"></test>
      <test name="'svn commit --changelist=foo' above a conflict" id="52" result="PASSED"></test>
      <test name="try to commit a file that is out-of-date" id="53" result="PASSED"></test>
      <test name="start-commit hook sees client capabilities" id="54" result="PASSED"></test>
      <test name="'svn commit SOME_URL' should error" id="55" result="PASSED"></test>
      <test name="commit a missing to-be-added file should fail" id="56" result="PASSED"></test>
    </suite>
    <suite name="copy" total="71" passed="71" failed="0">
      <test name="basic copy and move commands -- on files only" id="1" result="PASSED"></test>
      <test name="receive a copied directory during update" id="2" result="PASSED"></test>
      <test name="resurrect a deleted directory" id="3" result="PASSED"></test>
      <test name="svn cp URL URL cannot overwrite destination" id="4" result="PASSED"></test>
      <test name="svn cp PATH PATH cannot overwrite destination" id="5" result="PASSED"></test>
      <test name="copy a tree and modify before commit" id="6" result="PASSED"></test>
      <test name="copy files with properties" id="7" result="PASSED"></test>
      <test name="copy a tree and delete part of it before commit" id="8" result="PASSED"></test>
      <test name="move and revert a directory" id="9" result="PASSED"></test>
      <test name="executable bit should be preserved when copying" id="10" result="PASSED"></test>
      <test name="working-copy to repository copy" id="11" result="PASSED"></test>
      <test name="repository to working-copy copy" id="12" result="PASSED"></test>
      <test name="copy item to root of repository" id="13" result="PASSED"></test>
      <test name="copy URL URL/subdir" id="14" result="PASSED"></test>
      <test name="copy WC URL/subdir" id="15" result="PASSED"></test>
      <test name="resurrect a deleted file" id="16" result="PASSED"></test>
      <test name="copy file from repos to working copy and run diff" id="17" result="PASSED"></test>
      <test name="repos-&gt;WC copy with keyword or eol property set" id="18" result="PASSED"></test>
      <test name="revision-kind keywords with non-URL source" id="19" result="PASSED"></test>
      <test name="copy over a missing file" id="20" result="PASSED"></test>
      <test name="copy a deleted directory back from the repos" id="21" result="PASSED"></test>
      <test name="check for double URI escaping in svn ls -R" id="22" result="PASSED"></test>
      <test name="wc to wc copy attempts between different repos" id="23" result="PASSED"></test>
      <test name="wc to wc copy with deleted=true items" id="24" result="PASSED"></test>
      <test name="svn cp src-URL non-existent-URL-path" id="25" result="PASSED"></test>
      <test name="svn cp oldrev-of-deleted-URL URL" id="26" result="PASSED"></test>
      <test name="test URL to URL copying edge case" id="27" result="PASSED"></test>
      <test name="copy wc dir to itself" id="28" result="PASSED"></test>
      <test name="copy a complex mixed-rev wc" id="29" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file" id="30" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file with props" id="31" result="PASSED"></test>
      <test name="svn cp URL PATH replace file" id="32" result="PASSED"></test>
      <test name="svn cp URL PATH replace file with props" id="33" result="PASSED"></test>
      <test name="delete file scheduled for replace" id="34" result="PASSED"></test>
      <test name="move an unversioned file" id="35" result="PASSED"></test>
      <test name="'move' should not lose local mods" id="36" result="PASSED"></test>
      <test name="copy a deleted dir to a prefix of its old path" id="37" result="PASSED"></test>
      <test name="copy a copied file and dir" id="38" result="PASSED"></test>
      <test name="move a copied file and dir" id="39" result="PASSED"></test>
      <test name="move a moved file and dir" id="40" result="PASSED"></test>
      <test name="move a file twice within a moved dir" id="41" result="PASSED"></test>
      <test name="move a file out of a moved dir" id="42" result="PASSED"></test>
      <test name="move a dir twice within a moved dir" id="43" result="PASSED"></test>
      <test name="move a dir out of a moved dir" id="44" result="PASSED"></test>
      <test name="move a moved file back to original location" id="45" result="PASSED"></test>
      <test name="move a moved dir back to original location" id="46" result="PASSED"></test>
      <test name="copy and move added paths without commits" id="47" result="PASSED"></test>
      <test name="copy added uncommitted paths with props" id="48" result="PASSED"></test>
      <test name="copy added path to URL" id="49" result="PASSED"></test>
      <test name="move file using relative dst path names" id="50" result="PASSED"></test>
      <test name="move file using relative src path names" id="51" result="PASSED"></test>
      <test name="copy file using relative dst path names" id="52" result="PASSED"></test>
      <test name="copy file using relative src path names" id="53" result="PASSED"></test>
      <test name="svn mv multiple files to a common directory" id="54" result="PASSED"></test>
      <test name="svn cp multiple files to a common directory" id="55" result="PASSED"></test>
      <test name="move multiple files within a repo" id="56" result="PASSED"></test>
      <test name="copy multiple files within a repo" id="57" result="PASSED"></test>
      <test name="copy multiple files from a repo to a wc" id="58" result="PASSED"></test>
      <test name="copy multiple files from a wc to a repo" id="59" result="PASSED"></test>
      <test name="copy local files using peg rev syntax" id="60" result="PASSED"></test>
      <test name="copy local dirs using peg rev syntax" id="61" result="PASSED"></test>
      <test name="copy urls using peg rev syntax" id="62" result="PASSED"></test>
      <test name="copy old revision of wc dir to new dir" id="63" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH WC_PATH" id="64" result="PASSED"></test>
      <test name="svn cp --parents URL WC_PATH" id="65" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH URL" id="66" result="PASSED"></test>
      <test name="svn cp --parents URL URL" id="67" result="PASSED"></test>
      <test name="copy a URL that needs URI encoding to WC" id="68" result="PASSED"></test>
      <test name="copy wc in unversioned parent to other wc" id="69" result="PASSED"></test>
      <test name="update receives copy, but local source is replaced" id="70" result="PASSED"></test>
      <test name="copy file into absent dir" id="71" result="PASSED"></test>
    </suite>
    <suite name="depth" total="26" passed="26" failed="0">
      <test name="depth-empty checkout" id="1" result="PASSED"></test>
      <test name="depth-files checkout" id="2" result="PASSED"></test>
      <test name="non-recursive checkout equals depth-files" id="3" result="PASSED"></test>
      <test name="update depth-empty wc shouldn't receive file mod" id="4" result="PASSED"></test>
      <test name="update depth-immediates wc gets top file mod only" id="5" result="PASSED"></test>
      <test name="commit a file from a depth-empty working copy" id="6" result="PASSED"></test>
      <test name="act on a file in a depth-empty working copy" id="7" result="PASSED"></test>
      <test name="bring a dir into a depth-empty working copy" id="8" result="PASSED"></test>
      <test name="bring a file into a depth-immediates working copy" id="9" result="PASSED"></test>
      <test name="bring a dir into a depth-immediates working copy" id="10" result="PASSED"></test>
      <test name="bring a dir into a mixed-depth working copy" id="11" result="PASSED"></test>
      <test name="depth-empty working copy ignores a deletion" id="12" result="PASSED"></test>
      <test name="depth-immediates working copy ignores a deletion" id="13" result="PASSED"></test>
      <test name="depth-immediates working copy receives a deletion" id="14" result="PASSED"></test>
      <test name="gradually update an empty wc to depth=infinity" id="15" result="PASSED"></test>
      <test name="depth-immediates commit subdir propset, update" id="16" result="PASSED"></test>
      <test name="depth-immediates update receives subdir propset" id="17" result="PASSED"></test>
      <test name="commit property mods only, using --depth=empty" id="18" result="PASSED"></test>
      <test name="diff at various depths in non-infinity wc" id="19" result="PASSED"></test>
      <test name="commit some files with --depth=immediates" id="20" result="PASSED"></test>
      <test name="depth-immediates wc receives new directory" id="21" result="PASSED"></test>
      <test name="add multi-subdir tree with --depth=files" id="22" result="PASSED"></test>
      <test name="upgrade a depth=empty wc from above" id="23" result="PASSED"></test>
      <test name="status -u at various depths in non-infinity wc" id="24" result="PASSED"></test>
      <test name="'update -N' above a WC path deleted in repos HEAD" id="25" result="PASSED"></test>
      <test name="depth-empty update on a file doesn't break it" id="26" result="PASSED"></test>
    </suite>
    <suite name="diff" total="48" passed="48" failed="0">
      <test name="update a file" id="1" result="PASSED"></test>
      <test name="add a file" id="2" result="PASSED"></test>
      <test name="add a file in an added directory" id="3" result="PASSED"></test>
      <test name="replace a file with a file" id="4" result="PASSED"></test>
      <test name="multiple revisions diff'd forwards and backwards" id="5" result="PASSED"></test>
      <test name="non-recursive behaviour" id="6" result="PASSED"></test>
      <test name="diff only part of the repository" id="7" result="PASSED"></test>
      <test name="non version controlled files" id="8" result="PASSED"></test>
      <test name="pure repository diff update a file" id="9" result="PASSED"></test>
      <test name="diff when property was changed but text was not" id="10" result="PASSED"></test>
      <test name="don't diff file marked as binary type" id="11" result="PASSED"></test>
      <test name="svn diff errors against a non-existent URL" id="12" result="PASSED"></test>
      <test name="diff against the head of a moved file" id="13" result="PASSED"></test>
      <test name="diff text-bases against repository" id="14" result="PASSED"></test>
      <test name="repos-repos diff on item deleted from HEAD" id="15" result="PASSED"></test>
      <test name="select diff targets" id="16" result="PASSED"></test>
      <test name="diff for branches" id="17" result="PASSED"></test>
      <test name="diff between repos URLs and WC paths" id="18" result="PASSED"></test>
      <test name="diff between two file URLs (issue #1311)" id="19" result="PASSED"></test>
      <test name="diff a property change plus a local edit" id="20" result="PASSED"></test>
      <test name="check for omitted prefix in path component" id="21" result="PASSED"></test>
      <test name="diff a file that has been renamed" id="22" result="PASSED"></test>
      <test name="diff a file within a renamed directory" id="23" result="PASSED"></test>
      <test name="diff a prop change on a dir named explicitly" id="24" result="PASSED"></test>
      <test name="ensure that diff won't show keywords" id="25" result="PASSED"></test>
      <test name="show diffs for binary files with --force" id="26" result="PASSED"></test>
      <test name="scheduled deleted" id="27" result="PASSED"></test>
      <test name="diff a renamed directory" id="28" result="PASSED"></test>
      <test name="diff to BASE with local property mods" id="29" result="PASSED"></test>
      <test name="repos-wc diffs with local svn:mime-type prop mods" id="30" result="PASSED"></test>
      <test name="diff a property change plus a local prop edit" id="31" result="PASSED"></test>
      <test name="repos-wc diff showing added entries with props" id="32" result="PASSED"></test>
      <test name="nonrecursive diff + deleted directories" id="33" result="PASSED"></test>
      <test name="repos-&gt;WORKING diff showing added modifed dir" id="34" result="PASSED"></test>
      <test name="base-&gt;repos diff of moved file" id="35" result="PASSED"></test>
      <test name="wc-&gt;repos diff of added subtree" id="36" result="PASSED"></test>
      <test name="basic diff summarize" id="37" result="PASSED"></test>
      <test name="diff with svn:author that has &lt; in it" id="38" result="PASSED"></test>
      <test name="ignore whitespace when diffing" id="39" result="PASSED"></test>
      <test name="ignore eol styles when diffing" id="40" result="PASSED"></test>
      <test name="diff a revision of a file in a renamed folder" id="41" result="PASSED"></test>
      <test name="test diffs at various depths" id="42" result="PASSED"></test>
      <test name="ignore eol styles when diffing empty lines" id="43" result="PASSED"></test>
      <test name="backward repos-&gt;wc diff with copied file" id="44" result="PASSED"></test>
      <test name="xml diff summarize" id="45" result="PASSED"></test>
      <test name="svn diff --depth=empty FILE_WITH_LOCAL_MODS" id="46" result="PASSED"></test>
      <test name="'svn diff -x wc -r#' should return error" id="47" result="PASSED"></test>
      <test name="svn diff --diff-cmd provides the correct arguments" id="48" result="PASSED"></test>
    </suite>
    <suite name="export" total="16" passed="16" failed="0">
      <test name="export an empty directory" id="1" result="PASSED"></test>
      <test name="export the greek tree" id="2" result="PASSED"></test>
      <test name="attempt to export a nonexistent URL" id="3" result="PASSED"></test>
      <test name="export working copy" id="4" result="PASSED"></test>
      <test name="export working copy with mods" id="5" result="PASSED"></test>
      <test name="export over existing dir" id="6" result="PASSED"></test>
      <test name="export with keyword translation" id="7" result="PASSED"></test>
      <test name="export with eol translation" id="8" result="PASSED"></test>
      <test name="export working copy with keyword translation" id="9" result="PASSED"></test>
      <test name="export working copy with property mods" id="10" result="PASSED"></test>
      <test name="export working copy at base revision" id="11" result="PASSED"></test>
      <test name="export with --native-eol" id="12" result="PASSED"></test>
      <test name="export nonexistent file" id="13" result="PASSED"></test>
      <test name="export unversioned file" id="14" result="PASSED"></test>
      <test name="export with state deleted=true" id="15" result="PASSED"></test>
      <test name="export and create some intermediate folders" id="16" result="PASSED"></test>
    </suite>
    <suite name="externals" total="14" passed="14" failed="0">
      <test name="test checkouts with externals" id="1" result="PASSED"></test>
      <test name="update to receive a new external module" id="2" result="PASSED"></test>
      <test name="update to lose an external module" id="3" result="PASSED"></test>
      <test name="update change to an unmodified external module" id="4" result="PASSED"></test>
      <test name="update changes to a modified external module" id="5" result="PASSED"></test>
      <test name="update changes under an external module" id="6" result="PASSED"></test>
      <test name="commit and update additional externals" id="7" result="PASSED"></test>
      <test name="error if external target dir involves '.' or '..'" id="8" result="PASSED"></test>
      <test name="test exports with externals" id="9" result="PASSED"></test>
      <test name="test exports from working copies with externals" id="10" result="PASSED"></test>
      <test name="use a peg revision to specify an external module" id="11" result="PASSED"></test>
      <test name="check the new '-rN URL PATH' syntax" id="12" result="PASSED"></test>
      <test name="error if propset'ing external with invalid format" id="13" result="PASSED"></test>
      <test name="old 'PATH URL' format should ignore peg revisions" id="14" result="PASSED"></test>
    </suite>
    <suite name="history" total="2" passed="2" failed="0">
      <test name="verify that 'svn cat' traces renames" id="1" result="PASSED"></test>
      <test name="verify that 'svn cat' avoids false identities" id="2" result="PASSED"></test>
    </suite>
    <suite name="import" total="5" passed="5" failed="0">
      <test name="import of executable files" id="1" result="PASSED"></test>
      <test name="do not import ignored files in imported dirs" id="2" result="PASSED"></test>
      <test name="avoid creating empty revisions with import" id="3" result="PASSED"></test>
      <test name="import ignored files in imported dirs" id="4" result="PASSED"></test>
      <test name="import should honor the eol-style property" id="5" result="PASSED"></test>
    </suite>
    <suite name="lock" total="34" passed="34" failed="0">
      <test name="lock a file and verify that it's locked" id="1" result="PASSED"></test>
      <test name="commit a file and keep lock" id="2" result="PASSED"></test>
      <test name="commit a file and release lock" id="3" result="PASSED"></test>
      <test name="commit a locked file with a prop change" id="4" result="PASSED"></test>
      <test name="lock a file and verify lock breaking behavior" id="5" result="PASSED"></test>
      <test name="lock a file and verify lock stealing behavior" id="6" result="PASSED"></test>
      <test name="examine the fields of a lockfile for correctness" id="7" result="PASSED"></test>
      <test name="verify behavior when a lock in a wc is defunct" id="8" result="PASSED"></test>
      <test name="verify svn:needs-lock read-only behavior" id="9" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with defunct lock" id="10" result="PASSED"></test>
      <test name="verify lock removal on a deleted path" id="11" result="PASSED"></test>
      <test name="lock and unlock some files" id="12" result="PASSED"></test>
      <test name="verify removal of a directory with locks inside" id="13" result="PASSED"></test>
      <test name="verify status of lock in working copy" id="14" result="PASSED"></test>
      <test name="verify status of stolen lock" id="15" result="PASSED"></test>
      <test name="verify status of broken lock" id="16" result="PASSED"></test>
      <test name="verify error on locking non-existent file" id="17" result="PASSED"></test>
      <test name="lock an out-of-date file and ensure failure" id="18" result="PASSED"></test>
      <test name="update handles svn:needs-lock correctly" id="19" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with revert" id="20" result="PASSED"></test>
      <test name="examine the fields of a lock from a URL" id="21" result="PASSED"></test>
      <test name="lock/unlock several files in one go" id="22" result="PASSED"></test>
      <test name="lock/unlock switched files" id="23" result="PASSED"></test>
      <test name="lock and unlock a file with an URI-unsafe name" id="24" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part I" id="25" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part II" id="26" result="PASSED"></test>
      <test name="commit file with xml-unsafe name and release lock" id="27" result="PASSED"></test>
      <test name="verify info path@X or path -rY return repos lock" id="28" result="PASSED"></test>
      <test name="(un)lock set of files, one already (un)locked" id="29" result="PASSED"></test>
      <test name="show correct lock info on moved path" id="30" result="PASSED"></test>
      <test name="ls locked path needing URL encoding" id="31" result="PASSED"></test>
      <test name="verify unlocking with wrong lock token" id="32" result="PASSED"></test>
      <test name="verify recursive info shows lock info" id="33" result="PASSED"></test>
      <test name="unlock file locked by other user" id="34" result="PASSED"></test>
    </suite>
    <suite name="log" total="27" passed="27" failed="0">
      <test name="'svn log', no args, top of wc" id="1" result="PASSED"></test>
      <test name="'svn log' on an empty repository" id="2" result="PASSED"></test>
      <test name="'svn log -rN some_dir_unchanged_in_N'" id="3" result="PASSED"></test>
      <test name="'svn log -v -r 1:0 wc_root'" id="4" result="PASSED"></test>
      <test name="'svn log -r COMMITTED' of dynamic/local WC rev" id="5" result="PASSED"></test>
      <test name="'svn log', with args, top of wc" id="6" result="PASSED"></test>
      <test name="'svn log wc_target@N'" id="7" result="PASSED"></test>
      <test name="'svn log target@N' when target removed from HEAD" id="8" result="PASSED"></test>
      <test name="'svn log TGT' with copyfrom history" id="9" result="PASSED"></test>
      <test name="mod_dav_svn must escape invalid XML control chars" id="10" result="PASSED"></test>
      <test name="svn log --xml must not print empty date elements" id="11" result="PASSED"></test>
      <test name="svn log --limit" id="12" result="PASSED"></test>
      <test name="run log on an @BASE target" id="13" result="PASSED"></test>
      <test name="run log with verbose output" id="14" result="PASSED"></test>
      <test name="meta-test for the log parser" id="15" result="PASSED"></test>
      <test name="test 'svn log -g' on a single revision" id="16" result="PASSED"></test>
      <test name="test 'svn log -g' on a branching revision" id="17" result="PASSED"></test>
      <test name="test 'svn log -g' on a non-branching revision" id="18" result="PASSED"></test>
      <test name="test 'svn log -g' a path added before merge" id="19" result="PASSED"></test>
      <test name="test log -c for a single change" id="20" result="PASSED"></test>
      <test name="test log -c on range of changes" id="21" result="PASSED"></test>
      <test name="test log -c on comma-separated list of changes" id="22" result="PASSED"></test>
      <test name="svn log of two wc paths is disallowed" id="23" result="PASSED"></test>
      <test name="test revprop retrieval" id="24" result="PASSED"></test>
      <test name="log --xml escapes non-utf8 data (issue #2866)" id="25" result="PASSED"></test>
      <test name="'svn log -g target_with_bogus_mergeinfo'" id="26" result="PASSED"></test>
      <test name="log -g and explicit mergeinfo replacing inherited" id="27" result="PASSED"></test>
    </suite>
    <suite name="merge" total="99" passed="99" failed="0">
      <test name="performing a merge, with mixed results" id="1" result="PASSED"></test>
      <test name="merge and add new files/dirs with history" id="2" result="PASSED"></test>
      <test name="merge that deletes items" id="3" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -r" id="5" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -c" id="6" result="PASSED"></test>
      <test name="merging a file w/no explicit target path or revs" id="7" result="PASSED"></test>
      <test name="merge should not die if a target file is absent" id="8" result="PASSED"></test>
      <test name="merge on deleted directory in target" id="9" result="PASSED"></test>
      <test name="merging similar trees ancestrally unrelated" id="10" result="PASSED"></test>
      <test name="merge operations using PREV revision" id="11" result="PASSED"></test>
      <test name="merge change into unchanged binary file" id="12" result="PASSED"></test>
      <test name="3-way merge of 'file add' into existing binary" id="13" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -r option" id="14" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -c option" id="15" result="PASSED"></test>
      <test name="merge one file without explicit revisions" id="16" result="PASSED"></test>
      <test name="mark a revision range as merged" id="17" result="PASSED"></test>
      <test name="diff after merge that creates a new file" id="18" result="PASSED"></test>
      <test name="merge should skip over unversioned obstructions" id="19" result="PASSED"></test>
      <test name="merge into missing must not break working copy" id="20" result="PASSED"></test>
      <test name="merge --dry-run adding a new file with props" id="21" result="PASSED"></test>
      <test name="merge binary files with common ancestry" id="22" result="PASSED"></test>
      <test name="merge with funny characters (issue #1905)" id="23" result="PASSED"></test>
      <test name="merge changes to keyword expansion property" id="24" result="PASSED"></test>
      <test name="merge prop change into deleted target" id="25" result="PASSED"></test>
      <test name="merge a file whose name contains a space" id="26" result="PASSED"></test>
      <test name="merge between branches (Issue #2222)" id="27" result="PASSED"></test>
      <test name="property merges don't overwrite existing prop-mods" id="28" result="PASSED"></test>
      <test name="property merge conflict even without local mods" id="29" result="PASSED"></test>
      <test name="undo, then redo a property merge" id="30" result="PASSED"></test>
      <test name="cherry-pick a dependent change, get conflict" id="31" result="PASSED"></test>
      <test name="merge a replacement of a file" id="32" result="PASSED"></test>
      <test name="merge a replacement of a directory" id="33" result="PASSED"></test>
      <test name="replace both dir and one of its children" id="34" result="PASSED"></test>
      <test name="merge a replacement of a file to mixed rev wc" id="35" result="PASSED"></test>
      <test name="merge an added dir on a deleted dir in target" id="36" result="PASSED"></test>
      <test name="ignore whitespace when merging" id="37" result="PASSED"></test>
      <test name="ignore eolstyle when merging" id="38" result="PASSED"></test>
      <test name="conflict from merge of add over versioned file" id="39" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="40" result="PASSED"></test>
      <test name="handle eol-style propchange during merge" id="41" result="PASSED"></test>
      <test name="use inherited mergeinfo to avoid repeated merge" id="42" result="PASSED"></test>
      <test name="use subtree's mergeinfo to avoid repeated merge" id="43" result="PASSED"></test>
      <test name="drive reporter api in depth first order" id="44" result="PASSED"></test>
      <test name="target inherits mergeinfo from nearest ancestor" id="45" result="PASSED"></test>
      <test name="mergeinfo elides to ancestor with identical info" id="46" result="PASSED"></test>
      <test name="discontinuous merges produce correct mergeinfo" id="47" result="PASSED"></test>
      <test name="merge works when target has copied children" id="48" result="PASSED"></test>
      <test name="merge to switched path does not inherit or elide" id="49" result="PASSED"></test>
      <test name="merge to path with switched children" id="50" result="PASSED"></test>
      <test name="merge a change to a file, using relative path" id="51" result="PASSED"></test>
      <test name="mergeinfo can explicitly be empty" id="52" result="PASSED"></test>
      <test name="merge adding prop to child of merge target works" id="53" result="PASSED"></test>
      <test name="set no mergeinfo when merging from foreign repos" id="54" result="PASSED"></test>
      <test name="avoid repeated merges for cyclic merging" id="55" result="PASSED"></test>
      <test name="update does not merge mergeinfo" id="56" result="PASSED"></test>
      <test name="merge should merge mergeinfo" id="57" result="PASSED"></test>
      <test name="replace-style merge capability for a single file" id="58" result="PASSED"></test>
      <test name="merge to ood path can lead to inaccurate mergeinfo" id="59" result="PASSED"></test>
      <test name="merge test for --depth files" id="60" result="PASSED"></test>
      <test name="merge fails if subtree is deleted on src" id="61" result="PASSED"></test>
      <test name="subtrees can lose non-inheritable ranges" id="62" result="PASSED"></test>
      <test name="merge to sparse directories" id="63" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed dir" id="64" result="PASSED"></test>
      <test name="child having different rev ranges to merge" id="65" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed file" id="66" result="PASSED"></test>
      <test name="merge with auto detection of revision ranges" id="67" result="PASSED"></test>
      <test name="mergeinfo recording in skipped merge" id="68" result="PASSED"></test>
      <test name="command line supports cherry picked merge ranges" id="69" result="PASSED"></test>
      <test name="merge of propchange on subdir raises conflict" id="70" result="PASSED"></test>
      <test name="reverse merge of prop add on child" id="71" result="PASSED"></test>
      <test name="merge target with non inheritable mergeinfo" id="72" result="PASSED"></test>
      <test name="revert a commit on a target" id="73" result="PASSED"></test>
      <test name="--ignore-ancestry also ignores mergeinfo" id="74" result="PASSED"></test>
      <test name="merge from renamed branch" id="75" result="PASSED"></test>
      <test name="normalized mergeinfo is recorded on subtrees" id="76" result="PASSED"></test>
      <test name="subtrees added after start of merge range are ok" id="77" result="PASSED"></test>
      <test name="basic merge --reintegrate support" id="78" result="PASSED"></test>
      <test name="merge --reintegrate with renamed file on branch" id="79" result="PASSED"></test>
      <test name="merge --reintegrate on a never-updated branch" id="80" result="PASSED"></test>
      <test name="merge --reintegrate should fail in modified wc" id="81" result="PASSED"></test>
      <test name="merge --reintegrate should fail in mixed-rev wc" id="82" result="PASSED"></test>
      <test name="merge --reintegrate should fail in switched wc" id="83" result="PASSED"></test>
      <test name="merge --reintegrate should fail in shallow wc" id="84" result="PASSED"></test>
      <test name="merge --reintegrate should fail on stale source" id="85" result="PASSED"></test>
      <test name="cyclic merges dont add mergeinfo from own history" id="86" result="PASSED"></test>
      <test name="merge range predates history (issue #3094)" id="87" result="PASSED"></test>
      <test name="merge from a foreign repository" id="88" result="PASSED"></test>
      <test name="2-url merge from a foreign repository" id="89" result="PASSED"></test>
      <test name="merging an unknown url should return error" id="90" result="PASSED"></test>
      <test name="merges that remove all mergeinfo work" id="91" result="PASSED"></test>
      <test name="dont merge revs into a subtree that predate it" id="92" result="PASSED"></test>
      <test name="don't explicitly record implicit mergeinfo" id="93" result="PASSED"></test>
      <test name="merge with broken symlinks in target" id="94" result="PASSED"></test>
      <test name="subtree ranges might not intersect with target" id="95" result="PASSED"></test>
      <test name="merge fails with renamed subtrees with mergeinfo" id="96" result="PASSED"></test>
      <test name="subtree merge source might not exist" id="97" result="PASSED"></test>
      <test name="mergeinfo not set on subtree with empty mergeinfo" id="98" result="PASSED"></test>
      <test name="subtree merges dont cause spurious conflicts" id="100" result="PASSED"></test>
      <test name="target and subtrees need nonintersecting revs" id="101" result="PASSED"></test>
    </suite>
    <suite name="merge_authz" total="1" passed="1" failed="0">
      <test name="skipped paths get overriding mergeinfo" id="1" result="PASSED"></test>
    </suite>
    <suite name="mergeinfo" total="5" passed="5" failed="0">
      <test name="'mergeinfo' on a URL that lacks mergeinfo" id="1" result="PASSED"></test>
      <test name="'mergeinfo' on a path with mergeinfo" id="2" result="PASSED"></test>
      <test name="'mergeinfo' with source selection" id="3" result="PASSED"></test>
      <test name="'mergeinfo' with uninteresting source selection" id="4" result="PASSED"></test>
      <test name="mergeinfo of an unknown url should return error" id="5" result="PASSED"></test>
    </suite>
    <suite name="prop" total="26" passed="26" failed="0">
      <test name="write/read props in wc only (ps, pl, pdel, pe)" id="1" result="PASSED"></test>
      <test name="commit properties" id="2" result="PASSED"></test>
      <test name="receive properties via update" id="3" result="PASSED"></test>
      <test name="receive property changes as part of a downdate" id="4" result="PASSED"></test>
      <test name="commit the removal of props" id="5" result="PASSED"></test>
      <test name="update with conflicting props" id="6" result="PASSED"></test>
      <test name="commit with conflicting dirprops" id="7" result="PASSED"></test>
      <test name="props work when committing a replacement" id="8" result="PASSED"></test>
      <test name="props work when reverting a replacement" id="9" result="PASSED"></test>
      <test name="try to set inappropriate props" id="10" result="PASSED"></test>
      <test name="file copies inherit (not re-derive) special props" id="11" result="PASSED"></test>
      <test name="set, get, and delete a revprop change" id="12" result="PASSED"></test>
      <test name="some svn: properties should be converted" id="13" result="PASSED"></test>
      <test name="test binary property support" id="14" result="PASSED"></test>
      <test name="recursive property operations in BASE and WC" id="15" result="PASSED"></test>
      <test name="property operations on an URL" id="16" result="PASSED"></test>
      <test name="removal of schedule added file with properties" id="17" result="PASSED"></test>
      <test name="receive properties on the wc root via update" id="18" result="PASSED"></test>
      <test name="test properties on replaced files" id="19" result="PASSED"></test>
      <test name="test proplist at various depths on a wc" id="20" result="PASSED"></test>
      <test name="test proplist at various depths on a url" id="21" result="PASSED"></test>
      <test name="test prop* handle invalid property names" id="22" result="PASSED"></test>
      <test name="issue #2581: propset shouldn't touch symlink perms" id="23" result="PASSED"></test>
      <test name="remove a property with a custom namespace" id="24" result="PASSED"></test>
      <test name="property retrieval with peg and operative revs" id="25" result="PASSED"></test>
      <test name="test handling invalid svn:* property values" id="26" result="PASSED"></test>
    </suite>
    <suite name="revert" total="18" passed="18" failed="0">
      <test name="revert relative to wc root" id="1" result="PASSED"></test>
      <test name="revert reexpands manually contracted keyword" id="2" result="PASSED"></test>
      <test name="revert a replaced file with no properties" id="3" result="PASSED"></test>
      <test name="revert a moved file" id="4" result="PASSED"></test>
      <test name="revert svn cp PATH PATH replace file with props" id="5" result="PASSED"></test>
      <test name="revert a merge replacement of file with history" id="6" result="PASSED"></test>
      <test name="revert svn cp URL PATH replace file with props" id="7" result="PASSED"></test>
      <test name="revert file after second replace" id="8" result="PASSED"></test>
      <test name="revert after manual text-conflict resolution" id="9" result="PASSED"></test>
      <test name="revert after manual property-conflict resolution" id="10" result="PASSED"></test>
      <test name="revert a simple propset on a dir" id="11" result="PASSED"></test>
      <test name="revert a simple propset on a file" id="12" result="PASSED"></test>
      <test name="revert a simple propdel on a dir" id="13" result="PASSED"></test>
      <test name="revert a simple propdel on a file" id="14" result="PASSED"></test>
      <test name="revert a committed replace-with-history == no-op" id="15" result="PASSED"></test>
      <test name="status after schedule-delete, revert, and local rm" id="16" result="PASSED"></test>
      <test name="status after replace+, revert, and local rm" id="17" result="PASSED"></test>
      <test name="reverted replace with history restores checksum" id="18" result="PASSED"></test>
    </suite>
    <suite name="schedule" total="13" passed="13" failed="0">
      <test name="revert: add some files" id="1" result="PASSED"></test>
      <test name="revert: add some directories" id="2" result="PASSED"></test>
      <test name="revert: add some nested files and directories" id="3" result="PASSED"></test>
      <test name="revert: add some executable files" id="4" result="PASSED"></test>
      <test name="revert: delete some files" id="5" result="PASSED"></test>
      <test name="revert: delete some directories" id="6" result="PASSED"></test>
      <test name="unschedule addition on missing items" id="7" result="PASSED"></test>
      <test name="schedule and commit deletion on missing items" id="8" result="PASSED"></test>
      <test name="revert inside a newly added dir" id="9" result="PASSED"></test>
      <test name="status after add of deleted directory" id="10" result="PASSED"></test>
      <test name="'svn add' should traverse already-versioned dirs" id="11" result="PASSED"></test>
      <test name="'svn mkdir' should clean up after itself on error" id="12" result="PASSED"></test>
      <test name="'svn rm non-existent' should exit with an error" id="13" result="PASSED"></test>
    </suite>
    <suite name="special" total="14" passed="14" failed="0">
      <test name="general symlink handling" id="1" result="PASSED"></test>
      <test name="replace a normal file with a special file" id="2" result="PASSED"></test>
      <test name="import and export a symlink" id="3" result="PASSED"></test>
      <test name="'svn cp dir1 dir2' which contains a symlink" id="4" result="PASSED"></test>
      <test name="replace a special file with a non-special file" id="5" result="PASSED"></test>
      <test name="remove a symlink" id="6" result="PASSED"></test>
      <test name="merge symlink into file" id="7" result="PASSED"></test>
      <test name="merge file into symlink" id="8" result="PASSED"></test>
      <test name="checkout a repository containing symlinks" id="9" result="PASSED"></test>
      <test name="diff a symlink to a directory" id="10" result="PASSED"></test>
      <test name="checkout repository with unknown special file type" id="11" result="PASSED"></test>
      <test name="replace a special file with a directory" id="12" result="PASSED"></test>
      <test name="symlink obstructs incoming delete" id="13" result="PASSED"></test>
      <test name="warn when attempt operation on a reserved name" id="14" result="PASSED"></test>
    </suite>
    <suite name="stat" total="30" passed="30" failed="0">
      <test name="status on unversioned file in current directory" id="1" result="PASSED"></test>
      <test name="run 'status -u' when nested additions are pending" id="2" result="PASSED"></test>
      <test name="status -vN shows all items in current directory" id="3" result="PASSED"></test>
      <test name="status with a versioned file missing" id="4" result="PASSED"></test>
      <test name="status on versioned items whose type has changed" id="5" result="PASSED"></test>
      <test name="status on versioned items replaced by symlinks" id="6" result="PASSED"></test>
      <test name="status -u with new files in the repository" id="7" result="PASSED"></test>
      <test name="status for unignored file and directory" id="8" result="PASSED"></test>
      <test name="status on missing and unversioned file" id="9" result="PASSED"></test>
      <test name="status -u indicates out-of-dateness" id="10" result="PASSED"></test>
      <test name="status -u on outdated, added file shows only that" id="11" result="PASSED"></test>
      <test name="status -u on working copy deleted in HEAD" id="12" result="PASSED"></test>
      <test name="timestamp behaviour" id="13" result="PASSED"></test>
      <test name="status on '..' where '..' is not versioned" id="14" result="PASSED"></test>
      <test name="status -u in partially non-recursive wc" id="15" result="PASSED"></test>
      <test name="a missing dir in the anchor" id="16" result="PASSED"></test>
      <test name="status output in XML format" id="17" result="PASSED"></test>
      <test name="status on ignored directory" id="18" result="PASSED"></test>
      <test name="status on unversioned dir (issue 2030)" id="19" result="PASSED"></test>
      <test name="status with a versioned directory missing" id="20" result="PASSED"></test>
      <test name="status -v -N -u from different current directories" id="21" result="PASSED"></test>
      <test name="status on conflicted added file" id="22" result="PASSED"></test>
      <test name="status with inconsistent eol style" id="23" result="PASSED"></test>
      <test name="run 'status -u' variations w/ incoming propchanges" id="24" result="PASSED"></test>
      <test name="run 'status -uv' w/ incoming propchanges" id="25" result="PASSED"></test>
      <test name="run 'status -uN' with incoming changes" id="26" result="PASSED"></test>
      <test name="run 'status -u' with locally deleted directories" id="27" result="PASSED"></test>
      <test name="run 'status --depth=X' with local changes" id="28" result="PASSED"></test>
      <test name="run 'status --depth=X -u' with incoming changes" id="29" result="PASSED"></test>
      <test name="status -u on versioned items whose type changed" id="30" result="PASSED"></test>
    </suite>
    <suite name="svnadmin" total="15" passed="15" failed="0">
      <test name="loading of dumpstream with extra headers" id="1" result="PASSED"></test>
      <test name="load success on oversized Content-length" id="2" result="PASSED"></test>
      <test name="load failure on undersized Content-length" id="3" result="PASSED"></test>
      <test name="preserve date-less revisions in load (issue #2729)" id="4" result="PASSED"></test>
      <test name="'svnadmin dump' on copied directory" id="5" result="PASSED"></test>
      <test name="'svnadmin dump' on modified child of copied dir" id="6" result="PASSED"></test>
      <test name="'svnadmin dump --quiet'" id="7" result="PASSED"></test>
      <test name="'setlog' and 'setrevprop', bypassing hooks'" id="10" result="PASSED"></test>
      <test name="verify a repository containing paths like 'c:hi'" id="11" result="PASSED"></test>
      <test name="svnadmin verify detects corruption dump can't" id="12" result="PASSED"></test>
      <test name="recover a repository (FSFS only)" id="13" result="PASSED"></test>
      <test name="'svnadmin load --parent-dir' reparents mergeinfo" id="14" result="PASSED"></test>
      <test name="test 'svnadmin setuuid'" id="15" result="PASSED"></test>
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="16" result="PASSED"></test>
      <test name="'svnadmin create /path/to/repo/subdir'" id="17" result="PASSED"></test>
    </suite>
    <suite name="svnlook" total="10" passed="10" failed="0">
      <test name="test miscellaneous svnlook features" id="1" result="PASSED"></test>
      <test name="delete file in moved dir" id="2" result="PASSED"></test>
      <test name="test the printing of property diffs" id="3" result="PASSED"></test>
      <test name="svnlook info must allow inconsistent newlines" id="4" result="PASSED"></test>
      <test name="test --copy-info flag on the changed command" id="5" result="PASSED"></test>
      <test name="test 'svnlook tree --non-recursive'" id="6" result="PASSED"></test>
      <test name="history --limit" id="7" result="PASSED"></test>
      <test name="test 'svnlook diff -x -b' and 'svnlook diff -x -w'" id="8" result="PASSED"></test>
      <test name="test 'svnlook diff -x --ignore-eol-style'" id="9" result="PASSED"></test>
      <test name="test 'svnlook diff' on binary files" id="10" result="PASSED"></test>
    </suite>
    <suite name="svnsync" total="23" passed="23" failed="0">
      <test name="copy and modify" id="1" result="PASSED"></test>
      <test name="copy from previous version and modify" id="2" result="PASSED"></test>
      <test name="copy from previous version" id="3" result="PASSED"></test>
      <test name="modified in place" id="4" result="PASSED"></test>
      <test name="tag empty trunk" id="5" result="PASSED"></test>
      <test name="tag trunk containing a sub-directory" id="6" result="PASSED"></test>
      <test name="tag trunk containing a file (#2)" id="7" result="PASSED"></test>
      <test name="tag trunk containing a file" id="8" result="PASSED"></test>
      <test name="tag with a modified file" id="9" result="PASSED"></test>
      <test name="directory property changes" id="10" result="PASSED"></test>
      <test name="files and dirs mixed together" id="11" result="PASSED"></test>
      <test name="copy parent and modify prop" id="12" result="PASSED"></test>
      <test name="detect non-svnsync commits in destination" id="13" result="PASSED"></test>
      <test name="verify that unreadable content is not synced" id="14" result="PASSED"></test>
      <test name="verify that copies from unreadable dirs work" id="15" result="PASSED"></test>
      <test name="verify copies with mods from unreadable dirs" id="16" result="PASSED"></test>
      <test name="verify copies with mods from unreadable dirs +copy" id="17" result="PASSED"></test>
      <test name="test url encoding issues" id="18" result="PASSED"></test>
      <test name="test copying revs with no svn:author revprops" id="19" result="PASSED"></test>
      <test name="test copying revprops other than svn:*" id="20" result="PASSED"></test>
      <test name="test syncing subdirectories" id="21" result="PASSED"></test>
      <test name="test syncing subdirectories with changes on root" id="22" result="PASSED"></test>
      <test name="test move parent and modify child file in same rev" id="23" result="PASSED"></test>
    </suite>
    <suite name="svndumpfilter" total="2" passed="2" failed="0">
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="1" result="PASSED"></test>
      <test name="svndumpfilter loses mergeinfo" id="2" result="PASSED"></test>
    </suite>
    <suite name="svnversion" total="2" passed="2" failed="0">
      <test name="test 'svnversion' on wc and other dirs" id="1" result="PASSED"></test>
      <test name="test 'svnversion' with svn:externals" id="2" result="PASSED"></test>
    </suite>
    <suite name="switch" total="29" passed="29" failed="0">
      <test name="test some basic switching operations" id="1" result="PASSED"></test>
      <test name="commits after some basic switching operations" id="2" result="PASSED"></test>
      <test name="update wc that contains switched things" id="3" result="PASSED"></test>
      <test name="reverse update wc that contains switched things" id="4" result="PASSED"></test>
      <test name="update switched wc things to HEAD" id="5" result="PASSED"></test>
      <test name="reverse update switched wc things to an older rev" id="6" result="PASSED"></test>
      <test name="show logs for a switched file" id="7" result="PASSED"></test>
      <test name="relocate with deleted, missing and copied entries" id="8" result="PASSED"></test>
      <test name="switch that deletes a sub-directory" id="9" result="PASSED"></test>
      <test name="switch a file to a dir and back to the file" id="10" result="PASSED"></test>
      <test name="non-recursive switch" id="11" result="PASSED"></test>
      <test name="anchor=target that fails due to local mods" id="12" result="PASSED"></test>
      <test name="bad intermediate urls in use" id="13" result="PASSED"></test>
      <test name="obstructed switch" id="14" result="PASSED"></test>
      <test name="commit with mods below switch" id="15" result="PASSED"></test>
      <test name="relocate with prefixes longer than repo root" id="16" result="PASSED"></test>
      <test name="refresh the WC file system read-only attribute " id="17" result="PASSED"></test>
      <test name="switch shouldn't allow changing repos root" id="18" result="PASSED"></test>
      <test name="out of date propset should fail after a relocate" id="19" result="PASSED"></test>
      <test name="forced switch tolerates obstructions to adds" id="20" result="PASSED"></test>
      <test name="forced switch fails with some types of obstuctions" id="21" result="PASSED"></test>
      <test name="switch a scheduled-add file" id="22" result="PASSED"></test>
      <test name="mergeinfo does not elide post switch" id="23" result="PASSED"></test>
      <test name="switch tolerates WC adds" id="24" result="PASSED"></test>
      <test name="basic tests to verify switch along with depth" id="25" result="PASSED"></test>
      <test name="switch to dir@peg where dir doesn't exist in HEAD" id="26" result="PASSED"></test>
      <test name="switch file and dir to url containing spaces" id="27" result="PASSED"></test>
      <test name="switch to old rev of now renamed branch" id="28" result="PASSED"></test>
      <test name="switch a folder to the root of its repository" id="29" result="PASSED"></test>
    </suite>
    <suite name="trans" total="8" passed="8" failed="0">
      <test name="commit new files with keywords active from birth" id="1" result="PASSED"></test>
      <test name="update modified file with eol-style 'native'" id="2" result="PASSED"></test>
      <test name="committing eol-style change forces text send" id="3" result="PASSED"></test>
      <test name="keyword expansion for lone file in directory" id="4" result="PASSED"></test>
      <test name="keyword expanded on cat" id="5" result="PASSED"></test>
      <test name="copy, propset svn:eol-style, commit" id="6" result="PASSED"></test>
      <test name="propset, commit, check out into another wc" id="7" result="PASSED"></test>
      <test name="propset, revert" id="8" result="PASSED"></test>
    </suite>
    <suite name="update" total="43" passed="43" failed="0">
      <test name="update a locally-modified binary file" id="1" result="PASSED"></test>
      <test name="update to an old revision of a binary files" id="2" result="PASSED"></test>
      <test name="update should not munge adds or replaces" id="3" result="PASSED"></test>
      <test name="update to revision 0" id="4" result="PASSED"></test>
      <test name="overlapping identical changes should not conflict" id="5" result="PASSED"></test>
      <test name="delete files and update to resolve text conflicts" id="6" result="PASSED"></test>
      <test name="update that deletes modified files" id="7" result="PASSED"></test>
      <test name="update after add/rm of deleted state" id="8" result="PASSED"></test>
      <test name="update missing items (by name) in working copy" id="9" result="PASSED"></test>
      <test name="update that replaces a directory" id="10" result="PASSED"></test>
      <test name="update with explicit file target" id="11" result="PASSED"></test>
      <test name="receive prop update to file scheduled for deletion" id="12" result="PASSED"></test>
      <test name="bail when receive a file or dir named .svn" id="13" result="PASSED"></test>
      <test name="update missing dir to rev in which it is absent" id="14" result="PASSED"></test>
      <test name="another 'hudson' problem: updates that delete" id="15" result="PASSED"></test>
      <test name="explicit update of deleted=true targets" id="16" result="PASSED"></test>
      <test name="receive new dir with spaces in its name" id="17" result="PASSED"></test>
      <test name="non-recursive update" id="18" result="PASSED"></test>
      <test name="check out an empty dir" id="19" result="PASSED"></test>
      <test name="update target till it's gone, then get it back" id="20" result="PASSED"></test>
      <test name="update child before parent of a deleted tree" id="21" result="PASSED"></test>
      <test name="update a schedule-add directory" id="22" result="PASSED"></test>
      <test name="update target that was added in a future rev" id="23" result="PASSED"></test>
      <test name="update a nested wc in a read-only wc" id="24" result="PASSED"></test>
      <test name="obstructed update alters WC properties" id="25" result="PASSED"></test>
      <test name="update dir with xml-unsafe name" id="26" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="27" result="PASSED"></test>
      <test name="handle eol-style propchange during update" id="28" result="PASSED"></test>
      <test name="update schedule-add copy of old rev" id="29" result="PASSED"></test>
      <test name="forced update tolerates obstructions to adds" id="30" result="PASSED"></test>
      <test name="forced up fails with some types of obstructions" id="31" result="PASSED"></test>
      <test name="update wc containing a replaced-with-history file" id="33" result="PASSED"></test>
      <test name="update handles obstructing paths scheduled for add" id="34" result="PASSED"></test>
      <test name="update conflicted files" id="35" result="PASSED"></test>
      <test name="mergeinfo does not elide after update" id="36" result="PASSED"></test>
      <test name="update should make use of copyfrom args" id="37" result="PASSED"></test>
      <test name="update degrades well if copyfrom_path unavailable" id="38" result="PASSED"></test>
      <test name="update uses copyfrom &amp; accepts further txdeltas" id="39" result="PASSED"></test>
      <test name="update chooses right copyfrom for double move" id="40" result="PASSED"></test>
      <test name="updating a copied file with a deleted property" id="41" result="PASSED"></test>
      <test name="update --accept automatic conflict resolution" id="42" result="PASSED"></test>
      <test name="eof in interactive resolution can't break wc" id="43" result="PASSED"></test>
      <test name="update fails when repos uuid changed" id="44" result="PASSED"></test>
    </suite>
  </server>
  <server name="apache" url="http://localhost:42639">
    <suite name="authz" total="13" passed="13" failed="0">
      <test name="authz issue #2486 - open root" id="1" result="PASSED"></test>
      <test name="authz issue #2486 - open directory" id="2" result="PASSED"></test>
      <test name="broken authz files cause errors" id="3" result="PASSED"></test>
      <test name="test authz for read operations" id="4" result="PASSED"></test>
      <test name="test authz for write operations" id="5" result="PASSED"></test>
      <test name="test authz for checkout" id="6" result="PASSED"></test>
      <test name="test authz for log and tracing path changes" id="7" result="PASSED"></test>
      <test name="test authz for checkout and update" id="8" result="PASSED"></test>
      <test name="test authz for export with unreadable subfolder" id="9" result="PASSED"></test>
      <test name="test authz for aliases" id="10" result="PASSED"></test>
      <test name="test the authz validation rules" id="11" result="PASSED"></test>
      <test name="test authz for locking" id="12" result="PASSED"></test>
      <test name="switched to directory, no read access on parents" id="14" result="PASSED"></test>
    </suite>
    <suite name="autoprop" total="14" passed="14" failed="0">
      <test name="add: config=no,  commandline=none" id="1" result="PASSED"></test>
      <test name="add: config=yes, commandline=none" id="2" result="PASSED"></test>
      <test name="add: config=no,  commandline=yes" id="3" result="PASSED"></test>
      <test name="add: config=yes, commandline=yes" id="4" result="PASSED"></test>
      <test name="add: config=no,  commandline=no" id="5" result="PASSED"></test>
      <test name="add: config=yes, commandline=no" id="6" result="PASSED"></test>
      <test name="import: config=no,  commandline=none" id="7" result="PASSED"></test>
      <test name="import: config=yes, commandline=none" id="8" result="PASSED"></test>
      <test name="import: config=no,  commandline=yes" id="9" result="PASSED"></test>
      <test name="import: config=yes, commandline=yes" id="10" result="PASSED"></test>
      <test name="import: config=no,  commandline=no" id="11" result="PASSED"></test>
      <test name="import: config=yes, commandline=no" id="12" result="PASSED"></test>
      <test name="add directory" id="13" result="PASSED"></test>
      <test name="import directory" id="14" result="PASSED"></test>
    </suite>
    <suite name="basic" total="40" passed="40" failed="0">
      <test name="basic checkout of a wc" id="1" result="PASSED"></test>
      <test name="basic status command" id="2" result="PASSED"></test>
      <test name="basic commit command" id="3" result="PASSED"></test>
      <test name="basic update command" id="4" result="PASSED"></test>
      <test name="basic mkdir URL" id="5" result="PASSED"></test>
      <test name="basic mkdir URL, including parent directories" id="6" result="PASSED"></test>
      <test name="basic mkdir, including parent directories" id="7" result="PASSED"></test>
      <test name="basic corruption detection" id="8" result="PASSED"></test>
      <test name="receiving text merges as part of an update" id="9" result="PASSED"></test>
      <test name="basic conflict creation and resolution" id="10" result="PASSED"></test>
      <test name="basic cleanup command" id="11" result="PASSED"></test>
      <test name="basic revert command" id="12" result="PASSED"></test>
      <test name="basic switch command" id="13" result="PASSED"></test>
      <test name="basic delete command" id="14" result="PASSED"></test>
      <test name="checkout a path no longer in HEAD" id="15" result="PASSED"></test>
      <test name="attempt to change node kind" id="16" result="PASSED"></test>
      <test name="basic import of single new file" id="17" result="PASSED"></test>
      <test name="basic cat of files" id="18" result="PASSED"></test>
      <test name="basic ls" id="19" result="PASSED"></test>
      <test name="'svn log file:///nonexistent_path' should fail" id="20" result="PASSED"></test>
      <test name="basic auth caching" id="21" result="PASSED"></test>
      <test name="ignored files in added dirs should not be added" id="22" result="PASSED"></test>
      <test name="test add --parents" id="23" result="PASSED"></test>
      <test name="make sure URI syntaxes are parsed correctly" id="24" result="PASSED"></test>
      <test name="trying to check out a file should fail" id="25" result="PASSED"></test>
      <test name="basic info command" id="26" result="PASSED"></test>
      <test name="ignore files matching local ignores in added dirs" id="27" result="PASSED"></test>
      <test name="add ignored files in added dirs" id="28" result="PASSED"></test>
      <test name="check that repos root gets set on checkout" id="29" result="PASSED"></test>
      <test name="checks peg revision on filename with @ sign" id="30" result="PASSED"></test>
      <test name="info on file not existing in HEAD" id="31" result="PASSED"></test>
      <test name="ls a path no longer in HEAD" id="32" result="PASSED"></test>
      <test name="cat added file using -rPREV" id="33" result="PASSED"></test>
      <test name="basic ls of repos with space in name" id="34" result="PASSED"></test>
      <test name="delete file and directory with --keep-local" id="35" result="PASSED"></test>
      <test name="use folders with names like 'c:hi'" id="36" result="PASSED"></test>
      <test name="remotely remove directories from one repository" id="37" result="PASSED"></test>
      <test name="remotely remove directories from two repositories" id="38" result="PASSED"></test>
      <test name="automatic conflict resolution" id="39" result="PASSED"></test>
      <test name="get info on a file not in the repo" id="40" result="PASSED"></test>
    </suite>
    <suite name="blame" total="13" passed="13" failed="0">
      <test name="annotate a file whose name contains a space" id="1" result="PASSED"></test>
      <test name="annotate a binary file" id="2" result="PASSED"></test>
      <test name="annotating a directory not allowed" id="3" result="PASSED"></test>
      <test name="blame output in XML format" id="4" result="PASSED"></test>
      <test name="blame lines from unknown revisions" id="5" result="PASSED"></test>
      <test name="blame targets with peg-revisions" id="6" result="PASSED"></test>
      <test name="blame with different eol styles" id="7" result="PASSED"></test>
      <test name="ignore whitespace when blaming" id="8" result="PASSED"></test>
      <test name="ignore eol styles when blaming" id="9" result="PASSED"></test>
      <test name="test 'svn blame -g'" id="10" result="PASSED"></test>
      <test name="don't look for merged files out of range" id="11" result="PASSED"></test>
      <test name="blame target not in HEAD with peg-revisions" id="12" result="PASSED"></test>
      <test name="blame target not in HEAD" id="13" result="PASSED"></test>
    </suite>
    <suite name="cat" total="5" passed="5" failed="0">
      <test name="cat a local directory" id="1" result="PASSED"></test>
      <test name="cat a remote directory" id="2" result="PASSED"></test>
      <test name="cat a file at revision BASE" id="3" result="PASSED"></test>
      <test name="cat a nonexistent file" id="4" result="PASSED"></test>
      <test name="cat should skip uncattable resources" id="5" result="PASSED"></test>
    </suite>
    <suite name="changelist" total="8" passed="8" failed="0">
      <test name="add and remove files from changelists" id="1" result="PASSED"></test>
      <test name="commit with single --changelist" id="2" result="PASSED"></test>
      <test name="commit with multiple --changelist's" id="3" result="PASSED"></test>
      <test name="info --changelist" id="4" result="PASSED"></test>
      <test name="diff --changelist (wc-wc and repos-wc)" id="5" result="PASSED"></test>
      <test name="propset/del/get --changelist" id="6" result="PASSED"></test>
      <test name="revert --changelist" id="7" result="PASSED"></test>
      <test name="update --changelist" id="8" result="PASSED"></test>
    </suite>
    <suite name="checkout" total="13" passed="13" failed="0">
      <test name="co with obstructions should fail without --force" id="1" result="PASSED"></test>
      <test name="forced co fails if a dir obstructs a file" id="2" result="PASSED"></test>
      <test name="forced co fails if a file obstructs a dir" id="3" result="PASSED"></test>
      <test name="co with faux obstructions ok with --force" id="4" result="PASSED"></test>
      <test name="co with real obstructions ok with --force" id="5" result="PASSED"></test>
      <test name="co with real obstructions and unversioned files" id="6" result="PASSED"></test>
      <test name="forced co with versioned obstruction" id="7" result="PASSED"></test>
      <test name="import and checkout" id="8" result="PASSED"></test>
      <test name="checkout file with broken eol style" id="9" result="PASSED"></test>
      <test name="checkout and create some intermediate folders" id="10" result="PASSED"></test>
      <test name="checkout with peg revision" id="11" result="PASSED"></test>
      <test name="checkout with peg revision date" id="12" result="PASSED"></test>
      <test name="co handles obstructing paths scheduled for add" id="13" result="PASSED"></test>
    </suite>
    <suite name="commit" total="56" passed="56" failed="0">
      <test name="commit one file" id="1" result="PASSED"></test>
      <test name="commit one newly added file" id="2" result="PASSED"></test>
      <test name="commit one newly added binary file" id="3" result="PASSED"></test>
      <test name="commit multiple targets" id="4" result="PASSED"></test>
      <test name="commit multiple targets, 2nd variation" id="5" result="PASSED"></test>
      <test name="commit wc_dir/A/D -- includes D. (anchor=A, tgt=D)" id="6" result="PASSED"></test>
      <test name="commit wc_dir -- (anchor=wc_dir, tgt={})" id="7" result="PASSED"></test>
      <test name="committing unversioned object produces error" id="8" result="PASSED"></test>
      <test name="replace two nested dirs, verify empty contents" id="9" result="PASSED"></test>
      <test name="hudson prob 1.0:  delete file, commit, update" id="10" result="PASSED"></test>
      <test name="hudson prob 1.1:  delete dir, commit, update" id="11" result="PASSED"></test>
      <test name="hudson prob 1.2:  delete, commit, re-add, commit" id="12" result="PASSED"></test>
      <test name="hudson prob 2.0:  prop commit on old dir fails" id="13" result="PASSED"></test>
      <test name="hudson prob 2.1:  move files, update empty dir" id="14" result="PASSED"></test>
      <test name="hook testing" id="15" result="PASSED"></test>
      <test name="commit mixed-rev wc (no erroneous merge error)" id="16" result="PASSED"></test>
      <test name="commit files and dirs with URI-unsafe characters" id="17" result="PASSED"></test>
      <test name="commit deleted yet edited files" id="18" result="PASSED"></test>
      <test name="commit a file inside dir scheduled for addition" id="19" result="PASSED"></test>
      <test name="commit deleted (and missing) file" id="20" result="PASSED"></test>
      <test name="issue 644 attempt to add a file twice" id="21" result="PASSED"></test>
      <test name="commit from a dir with a longer name than the wc" id="22" result="PASSED"></test>
      <test name="try to commit when directory is locked" id="23" result="PASSED"></test>
      <test name="commit the current directory" id="24" result="PASSED"></test>
      <test name="attempted commit from multiple wc fails" id="25" result="PASSED"></test>
      <test name="commit named targets with -N (issues #1195, #1239)" id="26" result="PASSED"></test>
      <test name="commit with conflicts and check txn in repo" id="27" result="PASSED"></test>
      <test name="commit deletion of out-of-date file or dir" id="28" result="PASSED"></test>
      <test name="commit with a log message containing bad data" id="29" result="PASSED"></test>
      <test name="commit with invalid external editor cmd" id="30" result="PASSED"></test>
      <test name="commit with mods in schedule delete" id="31" result="PASSED"></test>
      <test name="tabs in paths" id="32" result="PASSED"></test>
      <test name="local ops should not be treated like commits" id="33" result="PASSED"></test>
      <test name="post commit hook failure case testing" id="34" result="PASSED"></test>
      <test name="commit two targets, both the same folder" id="35" result="PASSED"></test>
      <test name="commit files with inconsistent eol should fail" id="36" result="PASSED"></test>
      <test name="set revision props during remote mkdir" id="37" result="PASSED"></test>
      <test name="set revision props during remote delete" id="38" result="PASSED"></test>
      <test name="set revision props during commit" id="39" result="PASSED"></test>
      <test name="set revision props during import" id="40" result="PASSED"></test>
      <test name="set revision props during repos-to-repos copy" id="41" result="PASSED"></test>
      <test name="set revision props during wc-to-repos copy" id="42" result="PASSED"></test>
      <test name="set revision props during repos-to-repos move" id="43" result="PASSED"></test>
      <test name="set revision props during remote property edit" id="44" result="PASSED"></test>
      <test name="set multiple revision props during remote mkdir" id="45" result="PASSED"></test>
      <test name="set revprop without value ('') during remote mkdir" id="46" result="PASSED"></test>
      <test name="set revprop without '=' during remote mkdir" id="47" result="PASSED"></test>
      <test name="set invalid revision props during remote mkdir" id="48" result="PASSED"></test>
      <test name="start-commit hook failure case testing" id="49" result="PASSED"></test>
      <test name="pre-commit hook failure case testing" id="50" result="PASSED"></test>
      <test name="'svn commit -F foo' when foo is a versioned file" id="51" result="PASSED"></test>
      <test name="'svn commit --changelist=foo' above a conflict" id="52" result="PASSED"></test>
      <test name="try to commit a file that is out-of-date" id="53" result="PASSED"></test>
      <test name="start-commit hook sees client capabilities" id="54" result="PASSED"></test>
      <test name="'svn commit SOME_URL' should error" id="55" result="PASSED"></test>
      <test name="commit a missing to-be-added file should fail" id="56" result="PASSED"></test>
    </suite>
    <suite name="copy" total="71" passed="71" failed="0">
      <test name="basic copy and move commands -- on files only" id="1" result="PASSED"></test>
      <test name="receive a copied directory during update" id="2" result="PASSED"></test>
      <test name="resurrect a deleted directory" id="3" result="PASSED"></test>
      <test name="svn cp URL URL cannot overwrite destination" id="4" result="PASSED"></test>
      <test name="svn cp PATH PATH cannot overwrite destination" id="5" result="PASSED"></test>
      <test name="copy a tree and modify before commit" id="6" result="PASSED"></test>
      <test name="copy files with properties" id="7" result="PASSED"></test>
      <test name="copy a tree and delete part of it before commit" id="8" result="PASSED"></test>
      <test name="move and revert a directory" id="9" result="PASSED"></test>
      <test name="executable bit should be preserved when copying" id="10" result="PASSED"></test>
      <test name="working-copy to repository copy" id="11" result="PASSED"></test>
      <test name="repository to working-copy copy" id="12" result="PASSED"></test>
      <test name="copy item to root of repository" id="13" result="PASSED"></test>
      <test name="copy URL URL/subdir" id="14" result="PASSED"></test>
      <test name="copy WC URL/subdir" id="15" result="PASSED"></test>
      <test name="resurrect a deleted file" id="16" result="PASSED"></test>
      <test name="copy file from repos to working copy and run diff" id="17" result="PASSED"></test>
      <test name="repos-&gt;WC copy with keyword or eol property set" id="18" result="PASSED"></test>
      <test name="revision-kind keywords with non-URL source" id="19" result="PASSED"></test>
      <test name="copy over a missing file" id="20" result="PASSED"></test>
      <test name="copy a deleted directory back from the repos" id="21" result="PASSED"></test>
      <test name="check for double URI escaping in svn ls -R" id="22" result="PASSED"></test>
      <test name="wc to wc copy attempts between different repos" id="23" result="PASSED"></test>
      <test name="wc to wc copy with deleted=true items" id="24" result="PASSED"></test>
      <test name="svn cp src-URL non-existent-URL-path" id="25" result="PASSED"></test>
      <test name="svn cp oldrev-of-deleted-URL URL" id="26" result="PASSED"></test>
      <test name="test URL to URL copying edge case" id="27" result="PASSED"></test>
      <test name="copy wc dir to itself" id="28" result="PASSED"></test>
      <test name="copy a complex mixed-rev wc" id="29" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file" id="30" result="PASSED"></test>
      <test name="svn cp PATH PATH replace file with props" id="31" result="PASSED"></test>
      <test name="svn cp URL PATH replace file" id="32" result="PASSED"></test>
      <test name="svn cp URL PATH replace file with props" id="33" result="PASSED"></test>
      <test name="delete file scheduled for replace" id="34" result="PASSED"></test>
      <test name="move an unversioned file" id="35" result="PASSED"></test>
      <test name="'move' should not lose local mods" id="36" result="PASSED"></test>
      <test name="copy a deleted dir to a prefix of its old path" id="37" result="PASSED"></test>
      <test name="copy a copied file and dir" id="38" result="PASSED"></test>
      <test name="move a copied file and dir" id="39" result="PASSED"></test>
      <test name="move a moved file and dir" id="40" result="PASSED"></test>
      <test name="move a file twice within a moved dir" id="41" result="PASSED"></test>
      <test name="move a file out of a moved dir" id="42" result="PASSED"></test>
      <test name="move a dir twice within a moved dir" id="43" result="PASSED"></test>
      <test name="move a dir out of a moved dir" id="44" result="PASSED"></test>
      <test name="move a moved file back to original location" id="45" result="PASSED"></test>
      <test name="move a moved dir back to original location" id="46" result="PASSED"></test>
      <test name="copy and move added paths without commits" id="47" result="PASSED"></test>
      <test name="copy added uncommitted paths with props" id="48" result="PASSED"></test>
      <test name="copy added path to URL" id="49" result="PASSED"></test>
      <test name="move file using relative dst path names" id="50" result="PASSED"></test>
      <test name="move file using relative src path names" id="51" result="PASSED"></test>
      <test name="copy file using relative dst path names" id="52" result="PASSED"></test>
      <test name="copy file using relative src path names" id="53" result="PASSED"></test>
      <test name="svn mv multiple files to a common directory" id="54" result="PASSED"></test>
      <test name="svn cp multiple files to a common directory" id="55" result="PASSED"></test>
      <test name="move multiple files within a repo" id="56" result="PASSED"></test>
      <test name="copy multiple files within a repo" id="57" result="PASSED"></test>
      <test name="copy multiple files from a repo to a wc" id="58" result="PASSED"></test>
      <test name="copy multiple files from a wc to a repo" id="59" result="PASSED"></test>
      <test name="copy local files using peg rev syntax" id="60" result="PASSED"></test>
      <test name="copy local dirs using peg rev syntax" id="61" result="PASSED"></test>
      <test name="copy urls using peg rev syntax" id="62" result="PASSED"></test>
      <test name="copy old revision of wc dir to new dir" id="63" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH WC_PATH" id="64" result="PASSED"></test>
      <test name="svn cp --parents URL WC_PATH" id="65" result="PASSED"></test>
      <test name="svn cp --parents WC_PATH URL" id="66" result="PASSED"></test>
      <test name="svn cp --parents URL URL" id="67" result="PASSED"></test>
      <test name="copy a URL that needs URI encoding to WC" id="68" result="PASSED"></test>
      <test name="copy wc in unversioned parent to other wc" id="69" result="PASSED"></test>
      <test name="update receives copy, but local source is replaced" id="70" result="PASSED"></test>
      <test name="copy file into absent dir" id="71" result="PASSED"></test>
    </suite>
    <suite name="depth" total="26" passed="26" failed="0">
      <test name="depth-empty checkout" id="1" result="PASSED"></test>
      <test name="depth-files checkout" id="2" result="PASSED"></test>
      <test name="non-recursive checkout equals depth-files" id="3" result="PASSED"></test>
      <test name="update depth-empty wc shouldn't receive file mod" id="4" result="PASSED"></test>
      <test name="update depth-immediates wc gets top file mod only" id="5" result="PASSED"></test>
      <test name="commit a file from a depth-empty working copy" id="6" result="PASSED"></test>
      <test name="act on a file in a depth-empty working copy" id="7" result="PASSED"></test>
      <test name="bring a dir into a depth-empty working copy" id="8" result="PASSED"></test>
      <test name="bring a file into a depth-immediates working copy" id="9" result="PASSED"></test>
      <test name="bring a dir into a depth-immediates working copy" id="10" result="PASSED"></test>
      <test name="bring a dir into a mixed-depth working copy" id="11" result="PASSED"></test>
      <test name="depth-empty working copy ignores a deletion" id="12" result="PASSED"></test>
      <test name="depth-immediates working copy ignores a deletion" id="13" result="PASSED"></test>
      <test name="depth-immediates working copy receives a deletion" id="14" result="PASSED"></test>
      <test name="gradually update an empty wc to depth=infinity" id="15" result="PASSED"></test>
      <test name="depth-immediates commit subdir propset, update" id="16" result="PASSED"></test>
      <test name="depth-immediates update receives subdir propset" id="17" result="PASSED"></test>
      <test name="commit property mods only, using --depth=empty" id="18" result="PASSED"></test>
      <test name="diff at various depths in non-infinity wc" id="19" result="PASSED"></test>
      <test name="commit some files with --depth=immediates" id="20" result="PASSED"></test>
      <test name="depth-immediates wc receives new directory" id="21" result="PASSED"></test>
      <test name="add multi-subdir tree with --depth=files" id="22" result="PASSED"></test>
      <test name="upgrade a depth=empty wc from above" id="23" result="PASSED"></test>
      <test name="status -u at various depths in non-infinity wc" id="24" result="PASSED"></test>
      <test name="'update -N' above a WC path deleted in repos HEAD" id="25" result="PASSED"></test>
      <test name="depth-empty update on a file doesn't break it" id="26" result="PASSED"></test>
    </suite>
    <suite name="diff" total="48" passed="48" failed="0">
      <test name="update a file" id="1" result="PASSED"></test>
      <test name="add a file" id="2" result="PASSED"></test>
      <test name="add a file in an added directory" id="3" result="PASSED"></test>
      <test name="replace a file with a file" id="4" result="PASSED"></test>
      <test name="multiple revisions diff'd forwards and backwards" id="5" result="PASSED"></test>
      <test name="non-recursive behaviour" id="6" result="PASSED"></test>
      <test name="diff only part of the repository" id="7" result="PASSED"></test>
      <test name="non version controlled files" id="8" result="PASSED"></test>
      <test name="pure repository diff update a file" id="9" result="PASSED"></test>
      <test name="diff when property was changed but text was not" id="10" result="PASSED"></test>
      <test name="don't diff file marked as binary type" id="11" result="PASSED"></test>
      <test name="svn diff errors against a non-existent URL" id="12" result="PASSED"></test>
      <test name="diff against the head of a moved file" id="13" result="PASSED"></test>
      <test name="diff text-bases against repository" id="14" result="PASSED"></test>
      <test name="repos-repos diff on item deleted from HEAD" id="15" result="PASSED"></test>
      <test name="select diff targets" id="16" result="PASSED"></test>
      <test name="diff for branches" id="17" result="PASSED"></test>
      <test name="diff between repos URLs and WC paths" id="18" result="PASSED"></test>
      <test name="diff between two file URLs (issue #1311)" id="19" result="PASSED"></test>
      <test name="diff a property change plus a local edit" id="20" result="PASSED"></test>
      <test name="check for omitted prefix in path component" id="21" result="PASSED"></test>
      <test name="diff a file that has been renamed" id="22" result="PASSED"></test>
      <test name="diff a file within a renamed directory" id="23" result="PASSED"></test>
      <test name="diff a prop change on a dir named explicitly" id="24" result="PASSED"></test>
      <test name="ensure that diff won't show keywords" id="25" result="PASSED"></test>
      <test name="show diffs for binary files with --force" id="26" result="PASSED"></test>
      <test name="scheduled deleted" id="27" result="PASSED"></test>
      <test name="diff a renamed directory" id="28" result="PASSED"></test>
      <test name="diff to BASE with local property mods" id="29" result="PASSED"></test>
      <test name="repos-wc diffs with local svn:mime-type prop mods" id="30" result="PASSED"></test>
      <test name="diff a property change plus a local prop edit" id="31" result="PASSED"></test>
      <test name="repos-wc diff showing added entries with props" id="32" result="PASSED"></test>
      <test name="nonrecursive diff + deleted directories" id="33" result="PASSED"></test>
      <test name="repos-&gt;WORKING diff showing added modifed dir" id="34" result="PASSED"></test>
      <test name="base-&gt;repos diff of moved file" id="35" result="PASSED"></test>
      <test name="wc-&gt;repos diff of added subtree" id="36" result="PASSED"></test>
      <test name="basic diff summarize" id="37" result="PASSED"></test>
      <test name="diff with svn:author that has &lt; in it" id="38" result="PASSED"></test>
      <test name="ignore whitespace when diffing" id="39" result="PASSED"></test>
      <test name="ignore eol styles when diffing" id="40" result="PASSED"></test>
      <test name="diff a revision of a file in a renamed folder" id="41" result="PASSED"></test>
      <test name="test diffs at various depths" id="42" result="PASSED"></test>
      <test name="ignore eol styles when diffing empty lines" id="43" result="PASSED"></test>
      <test name="backward repos-&gt;wc diff with copied file" id="44" result="PASSED"></test>
      <test name="xml diff summarize" id="45" result="PASSED"></test>
      <test name="svn diff --depth=empty FILE_WITH_LOCAL_MODS" id="46" result="PASSED"></test>
      <test name="'svn diff -x wc -r#' should return error" id="47" result="PASSED"></test>
      <test name="svn diff --diff-cmd provides the correct arguments" id="48" result="PASSED"></test>
    </suite>
    <suite name="export" total="16" passed="16" failed="0">
      <test name="export an empty directory" id="1" result="PASSED"></test>
      <test name="export the greek tree" id="2" result="PASSED"></test>
      <test name="attempt to export a nonexistent URL" id="3" result="PASSED"></test>
      <test name="export working copy" id="4" result="PASSED"></test>
      <test name="export working copy with mods" id="5" result="PASSED"></test>
      <test name="export over existing dir" id="6" result="PASSED"></test>
      <test name="export with keyword translation" id="7" result="PASSED"></test>
      <test name="export with eol translation" id="8" result="PASSED"></test>
      <test name="export working copy with keyword translation" id="9" result="PASSED"></test>
      <test name="export working copy with property mods" id="10" result="PASSED"></test>
      <test name="export working copy at base revision" id="11" result="PASSED"></test>
      <test name="export with --native-eol" id="12" result="PASSED"></test>
      <test name="export nonexistent file" id="13" result="PASSED"></test>
      <test name="export unversioned file" id="14" result="PASSED"></test>
      <test name="export with state deleted=true" id="15" result="PASSED"></test>
      <test name="export and create some intermediate folders" id="16" result="PASSED"></test>
    </suite>
    <suite name="externals" total="14" passed="14" failed="0">
      <test name="test checkouts with externals" id="1" result="PASSED"></test>
      <test name="update to receive a new external module" id="2" result="PASSED"></test>
      <test name="update to lose an external module" id="3" result="PASSED"></test>
      <test name="update change to an unmodified external module" id="4" result="PASSED"></test>
      <test name="update changes to a modified external module" id="5" result="PASSED"></test>
      <test name="update changes under an external module" id="6" result="PASSED"></test>
      <test name="commit and update additional externals" id="7" result="PASSED"></test>
      <test name="error if external target dir involves '.' or '..'" id="8" result="PASSED"></test>
      <test name="test exports with externals" id="9" result="PASSED"></test>
      <test name="test exports from working copies with externals" id="10" result="PASSED"></test>
      <test name="use a peg revision to specify an external module" id="11" result="PASSED"></test>
      <test name="check the new '-rN URL PATH' syntax" id="12" result="PASSED"></test>
      <test name="error if propset'ing external with invalid format" id="13" result="PASSED"></test>
      <test name="old 'PATH URL' format should ignore peg revisions" id="14" result="PASSED"></test>
    </suite>
    <suite name="history" total="2" passed="2" failed="0">
      <test name="verify that 'svn cat' traces renames" id="1" result="PASSED"></test>
      <test name="verify that 'svn cat' avoids false identities" id="2" result="PASSED"></test>
    </suite>
    <suite name="import" total="5" passed="5" failed="0">
      <test name="import of executable files" id="1" result="PASSED"></test>
      <test name="do not import ignored files in imported dirs" id="2" result="PASSED"></test>
      <test name="avoid creating empty revisions with import" id="3" result="PASSED"></test>
      <test name="import ignored files in imported dirs" id="4" result="PASSED"></test>
      <test name="import should honor the eol-style property" id="5" result="PASSED"></test>
    </suite>
    <suite name="lock" total="34" passed="34" failed="0">
      <test name="lock a file and verify that it's locked" id="1" result="PASSED"></test>
      <test name="commit a file and keep lock" id="2" result="PASSED"></test>
      <test name="commit a file and release lock" id="3" result="PASSED"></test>
      <test name="commit a locked file with a prop change" id="4" result="PASSED"></test>
      <test name="lock a file and verify lock breaking behavior" id="5" result="PASSED"></test>
      <test name="lock a file and verify lock stealing behavior" id="6" result="PASSED"></test>
      <test name="examine the fields of a lockfile for correctness" id="7" result="PASSED"></test>
      <test name="verify behavior when a lock in a wc is defunct" id="8" result="PASSED"></test>
      <test name="verify svn:needs-lock read-only behavior" id="9" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with defunct lock" id="10" result="PASSED"></test>
      <test name="verify lock removal on a deleted path" id="11" result="PASSED"></test>
      <test name="lock and unlock some files" id="12" result="PASSED"></test>
      <test name="verify removal of a directory with locks inside" id="13" result="PASSED"></test>
      <test name="verify status of lock in working copy" id="14" result="PASSED"></test>
      <test name="verify status of stolen lock" id="15" result="PASSED"></test>
      <test name="verify status of broken lock" id="16" result="PASSED"></test>
      <test name="verify error on locking non-existent file" id="17" result="PASSED"></test>
      <test name="lock an out-of-date file and ensure failure" id="18" result="PASSED"></test>
      <test name="update handles svn:needs-lock correctly" id="19" result="PASSED"></test>
      <test name="verify svn:needs-lock behavior with revert" id="20" result="PASSED"></test>
      <test name="examine the fields of a lock from a URL" id="21" result="PASSED"></test>
      <test name="lock/unlock several files in one go" id="22" result="PASSED"></test>
      <test name="lock/unlock switched files" id="23" result="PASSED"></test>
      <test name="lock and unlock a file with an URI-unsafe name" id="24" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part I" id="25" result="PASSED"></test>
      <test name="svn:needs-lock and svn:executable, part II" id="26" result="PASSED"></test>
      <test name="commit file with xml-unsafe name and release lock" id="27" result="PASSED"></test>
      <test name="verify info path@X or path -rY return repos lock" id="28" result="PASSED"></test>
      <test name="(un)lock set of files, one already (un)locked" id="29" result="PASSED"></test>
      <test name="show correct lock info on moved path" id="30" result="PASSED"></test>
      <test name="ls locked path needing URL encoding" id="31" result="PASSED"></test>
      <test name="verify unlocking with wrong lock token" id="32" result="PASSED"></test>
      <test name="verify recursive info shows lock info" id="33" result="PASSED"></test>
      <test name="unlock file locked by other user" id="34" result="PASSED"></test>
    </suite>
    <suite name="log" total="27" passed="27" failed="0">
      <test name="'svn log', no args, top of wc" id="1" result="PASSED"></test>
      <test name="'svn log' on an empty repository" id="2" result="PASSED"></test>
      <test name="'svn log -rN some_dir_unchanged_in_N'" id="3" result="PASSED"></test>
      <test name="'svn log -v -r 1:0 wc_root'" id="4" result="PASSED"></test>
      <test name="'svn log -r COMMITTED' of dynamic/local WC rev" id="5" result="PASSED"></test>
      <test name="'svn log', with args, top of wc" id="6" result="PASSED"></test>
      <test name="'svn log wc_target@N'" id="7" result="PASSED"></test>
      <test name="'svn log target@N' when target removed from HEAD" id="8" result="PASSED"></test>
      <test name="'svn log TGT' with copyfrom history" id="9" result="PASSED"></test>
      <test name="mod_dav_svn must escape invalid XML control chars" id="10" result="PASSED"></test>
      <test name="svn log --xml must not print empty date elements" id="11" result="PASSED"></test>
      <test name="svn log --limit" id="12" result="PASSED"></test>
      <test name="run log on an @BASE target" id="13" result="PASSED"></test>
      <test name="run log with verbose output" id="14" result="PASSED"></test>
      <test name="meta-test for the log parser" id="15" result="PASSED"></test>
      <test name="test 'svn log -g' on a single revision" id="16" result="PASSED"></test>
      <test name="test 'svn log -g' on a branching revision" id="17" result="PASSED"></test>
      <test name="test 'svn log -g' on a non-branching revision" id="18" result="PASSED"></test>
      <test name="test 'svn log -g' a path added before merge" id="19" result="PASSED"></test>
      <test name="test log -c for a single change" id="20" result="PASSED"></test>
      <test name="test log -c on range of changes" id="21" result="PASSED"></test>
      <test name="test log -c on comma-separated list of changes" id="22" result="PASSED"></test>
      <test name="svn log of two wc paths is disallowed" id="23" result="PASSED"></test>
      <test name="test revprop retrieval" id="24" result="PASSED"></test>
      <test name="log --xml escapes non-utf8 data (issue #2866)" id="25" result="PASSED"></test>
      <test name="'svn log -g target_with_bogus_mergeinfo'" id="26" result="PASSED"></test>
      <test name="log -g and explicit mergeinfo replacing inherited" id="27" result="PASSED"></test>
    </suite>
    <suite name="merge" total="100" passed="100" failed="0">
      <test name="performing a merge, with mixed results" id="1" result="PASSED"></test>
      <test name="merge and add new files/dirs with history" id="2" result="PASSED"></test>
      <test name="merge that deletes items" id="3" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -r" id="5" result="PASSED"></test>
      <test name="merging a file w/no explicit target path using -c" id="6" result="PASSED"></test>
      <test name="merging a file w/no explicit target path or revs" id="7" result="PASSED"></test>
      <test name="merge should not die if a target file is absent" id="8" result="PASSED"></test>
      <test name="merge on deleted directory in target" id="9" result="PASSED"></test>
      <test name="merging similar trees ancestrally unrelated" id="10" result="PASSED"></test>
      <test name="merge operations using PREV revision" id="11" result="PASSED"></test>
      <test name="merge change into unchanged binary file" id="12" result="PASSED"></test>
      <test name="3-way merge of 'file add' into existing binary" id="13" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -r option" id="14" result="PASSED"></test>
      <test name="merge one file (issue #1150) using the -c option" id="15" result="PASSED"></test>
      <test name="merge one file without explicit revisions" id="16" result="PASSED"></test>
      <test name="mark a revision range as merged" id="17" result="PASSED"></test>
      <test name="diff after merge that creates a new file" id="18" result="PASSED"></test>
      <test name="merge should skip over unversioned obstructions" id="19" result="PASSED"></test>
      <test name="merge into missing must not break working copy" id="20" result="PASSED"></test>
      <test name="merge --dry-run adding a new file with props" id="21" result="PASSED"></test>
      <test name="merge binary files with common ancestry" id="22" result="PASSED"></test>
      <test name="merge with funny characters (issue #1905)" id="23" result="PASSED"></test>
      <test name="merge changes to keyword expansion property" id="24" result="PASSED"></test>
      <test name="merge prop change into deleted target" id="25" result="PASSED"></test>
      <test name="merge a file whose name contains a space" id="26" result="PASSED"></test>
      <test name="merge between branches (Issue #2222)" id="27" result="PASSED"></test>
      <test name="property merges don't overwrite existing prop-mods" id="28" result="PASSED"></test>
      <test name="property merge conflict even without local mods" id="29" result="PASSED"></test>
      <test name="undo, then redo a property merge" id="30" result="PASSED"></test>
      <test name="cherry-pick a dependent change, get conflict" id="31" result="PASSED"></test>
      <test name="merge a replacement of a file" id="32" result="PASSED"></test>
      <test name="merge a replacement of a directory" id="33" result="PASSED"></test>
      <test name="replace both dir and one of its children" id="34" result="PASSED"></test>
      <test name="merge a replacement of a file to mixed rev wc" id="35" result="PASSED"></test>
      <test name="merge an added dir on a deleted dir in target" id="36" result="PASSED"></test>
      <test name="ignore whitespace when merging" id="37" result="PASSED"></test>
      <test name="ignore eolstyle when merging" id="38" result="PASSED"></test>
      <test name="conflict from merge of add over versioned file" id="39" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="40" result="PASSED"></test>
      <test name="handle eol-style propchange during merge" id="41" result="PASSED"></test>
      <test name="use inherited mergeinfo to avoid repeated merge" id="42" result="PASSED"></test>
      <test name="use subtree's mergeinfo to avoid repeated merge" id="43" result="PASSED"></test>
      <test name="drive reporter api in depth first order" id="44" result="PASSED"></test>
      <test name="target inherits mergeinfo from nearest ancestor" id="45" result="PASSED"></test>
      <test name="mergeinfo elides to ancestor with identical info" id="46" result="PASSED"></test>
      <test name="discontinuous merges produce correct mergeinfo" id="47" result="PASSED"></test>
      <test name="merge works when target has copied children" id="48" result="PASSED"></test>
      <test name="merge to switched path does not inherit or elide" id="49" result="PASSED"></test>
      <test name="merge to path with switched children" id="50" result="PASSED"></test>
      <test name="merge a change to a file, using relative path" id="51" result="PASSED"></test>
      <test name="mergeinfo can explicitly be empty" id="52" result="PASSED"></test>
      <test name="merge adding prop to child of merge target works" id="53" result="PASSED"></test>
      <test name="set no mergeinfo when merging from foreign repos" id="54" result="PASSED"></test>
      <test name="avoid repeated merges for cyclic merging" id="55" result="PASSED"></test>
      <test name="update does not merge mergeinfo" id="56" result="PASSED"></test>
      <test name="merge should merge mergeinfo" id="57" result="PASSED"></test>
      <test name="replace-style merge capability for a single file" id="58" result="PASSED"></test>
      <test name="merge to ood path can lead to inaccurate mergeinfo" id="59" result="PASSED"></test>
      <test name="merge test for --depth files" id="60" result="PASSED"></test>
      <test name="merge fails if subtree is deleted on src" id="61" result="PASSED"></test>
      <test name="subtrees can lose non-inheritable ranges" id="62" result="PASSED"></test>
      <test name="merge to sparse directories" id="63" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed dir" id="64" result="PASSED"></test>
      <test name="child having different rev ranges to merge" id="65" result="PASSED"></test>
      <test name="merge -rold(before rename):head renamed file" id="66" result="PASSED"></test>
      <test name="merge with auto detection of revision ranges" id="67" result="PASSED"></test>
      <test name="mergeinfo recording in skipped merge" id="68" result="PASSED"></test>
      <test name="command line supports cherry picked merge ranges" id="69" result="PASSED"></test>
      <test name="merge of propchange on subdir raises conflict" id="70" result="PASSED"></test>
      <test name="reverse merge of prop add on child" id="71" result="PASSED"></test>
      <test name="merge target with non inheritable mergeinfo" id="72" result="PASSED"></test>
      <test name="revert a commit on a target" id="73" result="PASSED"></test>
      <test name="--ignore-ancestry also ignores mergeinfo" id="74" result="PASSED"></test>
      <test name="merge from renamed branch" id="75" result="PASSED"></test>
      <test name="normalized mergeinfo is recorded on subtrees" id="76" result="PASSED"></test>
      <test name="subtrees added after start of merge range are ok" id="77" result="PASSED"></test>
      <test name="basic merge --reintegrate support" id="78" result="PASSED"></test>
      <test name="merge --reintegrate with renamed file on branch" id="79" result="PASSED"></test>
      <test name="merge --reintegrate on a never-updated branch" id="80" result="PASSED"></test>
      <test name="merge --reintegrate should fail in modified wc" id="81" result="PASSED"></test>
      <test name="merge --reintegrate should fail in mixed-rev wc" id="82" result="PASSED"></test>
      <test name="merge --reintegrate should fail in switched wc" id="83" result="PASSED"></test>
      <test name="merge --reintegrate should fail in shallow wc" id="84" result="PASSED"></test>
      <test name="merge --reintegrate should fail on stale source" id="85" result="PASSED"></test>
      <test name="cyclic merges dont add mergeinfo from own history" id="86" result="PASSED"></test>
      <test name="merge range predates history (issue #3094)" id="87" result="PASSED"></test>
      <test name="merge from a foreign repository" id="88" result="PASSED"></test>
      <test name="2-url merge from a foreign repository" id="89" result="PASSED"></test>
      <test name="merging an unknown url should return error" id="90" result="PASSED"></test>
      <test name="merges that remove all mergeinfo work" id="91" result="PASSED"></test>
      <test name="dont merge revs into a subtree that predate it" id="92" result="PASSED"></test>
      <test name="don't explicitly record implicit mergeinfo" id="93" result="PASSED"></test>
      <test name="merge with broken symlinks in target" id="94" result="PASSED"></test>
      <test name="subtree ranges might not intersect with target" id="95" result="PASSED"></test>
      <test name="merge fails with renamed subtrees with mergeinfo" id="96" result="PASSED"></test>
      <test name="subtree merge source might not exist" id="97" result="PASSED"></test>
      <test name="mergeinfo not set on subtree with empty mergeinfo" id="98" result="PASSED"></test>
      <test name="commits to subtrees added by merge wreak havoc" id="99" result="PASSED"></test>
      <test name="subtree merges dont cause spurious conflicts" id="100" result="PASSED"></test>
      <test name="target and subtrees need nonintersecting revs" id="101" result="PASSED"></test>
    </suite>
    <suite name="merge_authz" total="1" passed="1" failed="0">
      <test name="skipped paths get overriding mergeinfo" id="1" result="PASSED"></test>
    </suite>
    <suite name="mergeinfo" total="5" passed="5" failed="0">
      <test name="'mergeinfo' on a URL that lacks mergeinfo" id="1" result="PASSED"></test>
      <test name="'mergeinfo' on a path with mergeinfo" id="2" result="PASSED"></test>
      <test name="'mergeinfo' with source selection" id="3" result="PASSED"></test>
      <test name="'mergeinfo' with uninteresting source selection" id="4" result="PASSED"></test>
      <test name="mergeinfo of an unknown url should return error" id="5" result="PASSED"></test>
    </suite>
    <suite name="prop" total="26" passed="26" failed="0">
      <test name="write/read props in wc only (ps, pl, pdel, pe)" id="1" result="PASSED"></test>
      <test name="commit properties" id="2" result="PASSED"></test>
      <test name="receive properties via update" id="3" result="PASSED"></test>
      <test name="receive property changes as part of a downdate" id="4" result="PASSED"></test>
      <test name="commit the removal of props" id="5" result="PASSED"></test>
      <test name="update with conflicting props" id="6" result="PASSED"></test>
      <test name="commit with conflicting dirprops" id="7" result="PASSED"></test>
      <test name="props work when committing a replacement" id="8" result="PASSED"></test>
      <test name="props work when reverting a replacement" id="9" result="PASSED"></test>
      <test name="try to set inappropriate props" id="10" result="PASSED"></test>
      <test name="file copies inherit (not re-derive) special props" id="11" result="PASSED"></test>
      <test name="set, get, and delete a revprop change" id="12" result="PASSED"></test>
      <test name="some svn: properties should be converted" id="13" result="PASSED"></test>
      <test name="test binary property support" id="14" result="PASSED"></test>
      <test name="recursive property operations in BASE and WC" id="15" result="PASSED"></test>
      <test name="property operations on an URL" id="16" result="PASSED"></test>
      <test name="removal of schedule added file with properties" id="17" result="PASSED"></test>
      <test name="receive properties on the wc root via update" id="18" result="PASSED"></test>
      <test name="test properties on replaced files" id="19" result="PASSED"></test>
      <test name="test proplist at various depths on a wc" id="20" result="PASSED"></test>
      <test name="test proplist at various depths on a url" id="21" result="PASSED"></test>
      <test name="test prop* handle invalid property names" id="22" result="PASSED"></test>
      <test name="issue #2581: propset shouldn't touch symlink perms" id="23" result="PASSED"></test>
      <test name="remove a property with a custom namespace" id="24" result="PASSED"></test>
      <test name="property retrieval with peg and operative revs" id="25" result="PASSED"></test>
      <test name="test handling invalid svn:* property values" id="26" result="PASSED"></test>
    </suite>
    <suite name="revert" total="18" passed="18" failed="0">
      <test name="revert relative to wc root" id="1" result="PASSED"></test>
      <test name="revert reexpands manually contracted keyword" id="2" result="PASSED"></test>
      <test name="revert a replaced file with no properties" id="3" result="PASSED"></test>
      <test name="revert a moved file" id="4" result="PASSED"></test>
      <test name="revert svn cp PATH PATH replace file with props" id="5" result="PASSED"></test>
      <test name="revert a merge replacement of file with history" id="6" result="PASSED"></test>
      <test name="revert svn cp URL PATH replace file with props" id="7" result="PASSED"></test>
      <test name="revert file after second replace" id="8" result="PASSED"></test>
      <test name="revert after manual text-conflict resolution" id="9" result="PASSED"></test>
      <test name="revert after manual property-conflict resolution" id="10" result="PASSED"></test>
      <test name="revert a simple propset on a dir" id="11" result="PASSED"></test>
      <test name="revert a simple propset on a file" id="12" result="PASSED"></test>
      <test name="revert a simple propdel on a dir" id="13" result="PASSED"></test>
      <test name="revert a simple propdel on a file" id="14" result="PASSED"></test>
      <test name="revert a committed replace-with-history == no-op" id="15" result="PASSED"></test>
      <test name="status after schedule-delete, revert, and local rm" id="16" result="PASSED"></test>
      <test name="status after replace+, revert, and local rm" id="17" result="PASSED"></test>
      <test name="reverted replace with history restores checksum" id="18" result="PASSED"></test>
    </suite>
    <suite name="schedule" total="13" passed="13" failed="0">
      <test name="revert: add some files" id="1" result="PASSED"></test>
      <test name="revert: add some directories" id="2" result="PASSED"></test>
      <test name="revert: add some nested files and directories" id="3" result="PASSED"></test>
      <test name="revert: add some executable files" id="4" result="PASSED"></test>
      <test name="revert: delete some files" id="5" result="PASSED"></test>
      <test name="revert: delete some directories" id="6" result="PASSED"></test>
      <test name="unschedule addition on missing items" id="7" result="PASSED"></test>
      <test name="schedule and commit deletion on missing items" id="8" result="PASSED"></test>
      <test name="revert inside a newly added dir" id="9" result="PASSED"></test>
      <test name="status after add of deleted directory" id="10" result="PASSED"></test>
      <test name="'svn add' should traverse already-versioned dirs" id="11" result="PASSED"></test>
      <test name="'svn mkdir' should clean up after itself on error" id="12" result="PASSED"></test>
      <test name="'svn rm non-existent' should exit with an error" id="13" result="PASSED"></test>
    </suite>
    <suite name="special" total="14" passed="14" failed="0">
      <test name="general symlink handling" id="1" result="PASSED"></test>
      <test name="replace a normal file with a special file" id="2" result="PASSED"></test>
      <test name="import and export a symlink" id="3" result="PASSED"></test>
      <test name="'svn cp dir1 dir2' which contains a symlink" id="4" result="PASSED"></test>
      <test name="replace a special file with a non-special file" id="5" result="PASSED"></test>
      <test name="remove a symlink" id="6" result="PASSED"></test>
      <test name="merge symlink into file" id="7" result="PASSED"></test>
      <test name="merge file into symlink" id="8" result="PASSED"></test>
      <test name="checkout a repository containing symlinks" id="9" result="PASSED"></test>
      <test name="diff a symlink to a directory" id="10" result="PASSED"></test>
      <test name="checkout repository with unknown special file type" id="11" result="PASSED"></test>
      <test name="replace a special file with a directory" id="12" result="PASSED"></test>
      <test name="symlink obstructs incoming delete" id="13" result="PASSED"></test>
      <test name="warn when attempt operation on a reserved name" id="14" result="PASSED"></test>
    </suite>
    <suite name="stat" total="30" passed="30" failed="0">
      <test name="status on unversioned file in current directory" id="1" result="PASSED"></test>
      <test name="run 'status -u' when nested additions are pending" id="2" result="PASSED"></test>
      <test name="status -vN shows all items in current directory" id="3" result="PASSED"></test>
      <test name="status with a versioned file missing" id="4" result="PASSED"></test>
      <test name="status on versioned items whose type has changed" id="5" result="PASSED"></test>
      <test name="status on versioned items replaced by symlinks" id="6" result="PASSED"></test>
      <test name="status -u with new files in the repository" id="7" result="PASSED"></test>
      <test name="status for unignored file and directory" id="8" result="PASSED"></test>
      <test name="status on missing and unversioned file" id="9" result="PASSED"></test>
      <test name="status -u indicates out-of-dateness" id="10" result="PASSED"></test>
      <test name="status -u on outdated, added file shows only that" id="11" result="PASSED"></test>
      <test name="status -u on working copy deleted in HEAD" id="12" result="PASSED"></test>
      <test name="timestamp behaviour" id="13" result="PASSED"></test>
      <test name="status on '..' where '..' is not versioned" id="14" result="PASSED"></test>
      <test name="status -u in partially non-recursive wc" id="15" result="PASSED"></test>
      <test name="a missing dir in the anchor" id="16" result="PASSED"></test>
      <test name="status output in XML format" id="17" result="PASSED"></test>
      <test name="status on ignored directory" id="18" result="PASSED"></test>
      <test name="status on unversioned dir (issue 2030)" id="19" result="PASSED"></test>
      <test name="status with a versioned directory missing" id="20" result="PASSED"></test>
      <test name="status -v -N -u from different current directories" id="21" result="PASSED"></test>
      <test name="status on conflicted added file" id="22" result="PASSED"></test>
      <test name="status with inconsistent eol style" id="23" result="PASSED"></test>
      <test name="run 'status -u' variations w/ incoming propchanges" id="24" result="PASSED"></test>
      <test name="run 'status -uv' w/ incoming propchanges" id="25" result="PASSED"></test>
      <test name="run 'status -uN' with incoming changes" id="26" result="PASSED"></test>
      <test name="run 'status -u' with locally deleted directories" id="27" result="PASSED"></test>
      <test name="run 'status --depth=X' with local changes" id="28" result="PASSED"></test>
      <test name="run 'status --depth=X -u' with incoming changes" id="29" result="PASSED"></test>
      <test name="status -u on versioned items whose type changed" id="30" result="PASSED"></test>
    </suite>
    <suite name="svnadmin" total="15" passed="15" failed="0">
      <test name="loading of dumpstream with extra headers" id="1" result="PASSED"></test>
      <test name="load success on oversized Content-length" id="2" result="PASSED"></test>
      <test name="load failure on undersized Content-length" id="3" result="PASSED"></test>
      <test name="preserve date-less revisions in load (issue #2729)" id="4" result="PASSED"></test>
      <test name="'svnadmin dump' on copied directory" id="5" result="PASSED"></test>
      <test name="'svnadmin dump' on modified child of copied dir" id="6" result="PASSED"></test>
      <test name="'svnadmin dump --quiet'" id="7" result="PASSED"></test>
      <test name="'setlog' and 'setrevprop', bypassing hooks'" id="10" result="PASSED"></test>
      <test name="verify a repository containing paths like 'c:hi'" id="11" result="PASSED"></test>
      <test name="svnadmin verify detects corruption dump can't" id="12" result="PASSED"></test>
      <test name="recover a repository (FSFS only)" id="13" result="PASSED"></test>
      <test name="'svnadmin load --parent-dir' reparents mergeinfo" id="14" result="PASSED"></test>
      <test name="test 'svnadmin setuuid'" id="15" result="PASSED"></test>
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="16" result="PASSED"></test>
      <test name="'svnadmin create /path/to/repo/subdir'" id="17" result="PASSED"></test>
    </suite>
    <suite name="svnlook" total="10" passed="10" failed="0">
      <test name="test miscellaneous svnlook features" id="1" result="PASSED"></test>
      <test name="delete file in moved dir" id="2" result="PASSED"></test>
      <test name="test the printing of property diffs" id="3" result="PASSED"></test>
      <test name="svnlook info must allow inconsistent newlines" id="4" result="PASSED"></test>
      <test name="test --copy-info flag on the changed command" id="5" result="PASSED"></test>
      <test name="test 'svnlook tree --non-recursive'" id="6" result="PASSED"></test>
      <test name="history --limit" id="7" result="PASSED"></test>
      <test name="test 'svnlook diff -x -b' and 'svnlook diff -x -w'" id="8" result="PASSED"></test>
      <test name="test 'svnlook diff -x --ignore-eol-style'" id="9" result="PASSED"></test>
      <test name="test 'svnlook diff' on binary files" id="10" result="PASSED"></test>
    </suite>
    <suite name="svnsync" total="23" passed="23" failed="0">
      <test name="copy and modify" id="1" result="PASSED"></test>
      <test name="copy from previous version and modify" id="2" result="PASSED"></test>
      <test name="copy from previous version" id="3" result="PASSED"></test>
      <test name="modified in place" id="4" result="PASSED"></test>
      <test name="tag empty trunk" id="5" result="PASSED"></test>
      <test name="tag trunk containing a sub-directory" id="6" result="PASSED"></test>
      <test name="tag trunk containing a file (#2)" id="7" result="PASSED"></test>
      <test name="tag trunk containing a file" id="8" result="PASSED"></test>
      <test name="tag with a modified file" id="9" result="PASSED"></test>
      <test name="directory property changes" id="10" result="PASSED"></test>
      <test name="files and dirs mixed together" id="11" result="PASSED"></test>
      <test name="copy parent and modify prop" id="12" result="PASSED"></test>
      <test name="detect non-svnsync commits in destination" id="13" result="PASSED"></test>
      <test name="verify that unreadable content is not synced" id="14" result="PASSED"></test>
      <test name="verify that copies from unreadable dirs work" id="15" result="PASSED"></test>
      <test name="verify copies with mods from unreadable dirs" id="16" result="PASSED"></test>
      <test name="verify copies with mods from unreadable dirs +copy" id="17" result="PASSED"></test>
      <test name="test url encoding issues" id="18" result="PASSED"></test>
      <test name="test copying revs with no svn:author revprops" id="19" result="PASSED"></test>
      <test name="test copying revprops other than svn:*" id="20" result="PASSED"></test>
      <test name="test syncing subdirectories" id="21" result="PASSED"></test>
      <test name="test syncing subdirectories with changes on root" id="22" result="PASSED"></test>
      <test name="test move parent and modify child file in same rev" id="23" result="PASSED"></test>
    </suite>
    <suite name="svndumpfilter" total="2" passed="2" failed="0">
      <test name="reflect dropped renumbered revs in svn:mergeinfo" id="1" result="PASSED"></test>
      <test name="svndumpfilter loses mergeinfo" id="2" result="PASSED"></test>
    </suite>
    <suite name="svnversion" total="2" passed="2" failed="0">
      <test name="test 'svnversion' on wc and other dirs" id="1" result="PASSED"></test>
      <test name="test 'svnversion' with svn:externals" id="2" result="PASSED"></test>
    </suite>
    <suite name="switch" total="29" passed="29" failed="0">
      <test name="test some basic switching operations" id="1" result="PASSED"></test>
      <test name="commits after some basic switching operations" id="2" result="PASSED"></test>
      <test name="update wc that contains switched things" id="3" result="PASSED"></test>
      <test name="reverse update wc that contains switched things" id="4" result="PASSED"></test>
      <test name="update switched wc things to HEAD" id="5" result="PASSED"></test>
      <test name="reverse update switched wc things to an older rev" id="6" result="PASSED"></test>
      <test name="show logs for a switched file" id="7" result="PASSED"></test>
      <test name="relocate with deleted, missing and copied entries" id="8" result="PASSED"></test>
      <test name="switch that deletes a sub-directory" id="9" result="PASSED"></test>
      <test name="switch a file to a dir and back to the file" id="10" result="PASSED"></test>
      <test name="non-recursive switch" id="11" result="PASSED"></test>
      <test name="anchor=target that fails due to local mods" id="12" result="PASSED"></test>
      <test name="bad intermediate urls in use" id="13" result="PASSED"></test>
      <test name="obstructed switch" id="14" result="PASSED"></test>
      <test name="commit with mods below switch" id="15" result="PASSED"></test>
      <test name="relocate with prefixes longer than repo root" id="16" result="PASSED"></test>
      <test name="refresh the WC file system read-only attribute " id="17" result="PASSED"></test>
      <test name="switch shouldn't allow changing repos root" id="18" result="PASSED"></test>
      <test name="out of date propset should fail after a relocate" id="19" result="PASSED"></test>
      <test name="forced switch tolerates obstructions to adds" id="20" result="PASSED"></test>
      <test name="forced switch fails with some types of obstuctions" id="21" result="PASSED"></test>
      <test name="switch a scheduled-add file" id="22" result="PASSED"></test>
      <test name="mergeinfo does not elide post switch" id="23" result="PASSED"></test>
      <test name="switch tolerates WC adds" id="24" result="PASSED"></test>
      <test name="basic tests to verify switch along with depth" id="25" result="PASSED"></test>
      <test name="switch to dir@peg where dir doesn't exist in HEAD" id="26" result="PASSED"></test>
      <test name="switch file and dir to url containing spaces" id="27" result="PASSED"></test>
      <test name="switch to old rev of now renamed branch" id="28" result="PASSED"></test>
      <test name="switch a folder to the root of its repository" id="29" result="PASSED"></test>
    </suite>
    <suite name="trans" total="8" passed="8" failed="0">
      <test name="commit new files with keywords active from birth" id="1" result="PASSED"></test>
      <test name="update modified file with eol-style 'native'" id="2" result="PASSED"></test>
      <test name="committing eol-style change forces text send" id="3" result="PASSED"></test>
      <test name="keyword expansion for lone file in directory" id="4" result="PASSED"></test>
      <test name="keyword expanded on cat" id="5" result="PASSED"></test>
      <test name="copy, propset svn:eol-style, commit" id="6" result="PASSED"></test>
      <test name="propset, commit, check out into another wc" id="7" result="PASSED"></test>
      <test name="propset, revert" id="8" result="PASSED"></test>
    </suite>
    <suite name="update" total="43" passed="43" failed="0">
      <test name="update a locally-modified binary file" id="1" result="PASSED"></test>
      <test name="update to an old revision of a binary files" id="2" result="PASSED"></test>
      <test name="update should not munge adds or replaces" id="3" result="PASSED"></test>
      <test name="update to revision 0" id="4" result="PASSED"></test>
      <test name="overlapping identical changes should not conflict" id="5" result="PASSED"></test>
      <test name="delete files and update to resolve text conflicts" id="6" result="PASSED"></test>
      <test name="update that deletes modified files" id="7" result="PASSED"></test>
      <test name="update after add/rm of deleted state" id="8" result="PASSED"></test>
      <test name="update missing items (by name) in working copy" id="9" result="PASSED"></test>
      <test name="update that replaces a directory" id="10" result="PASSED"></test>
      <test name="update with explicit file target" id="11" result="PASSED"></test>
      <test name="receive prop update to file scheduled for deletion" id="12" result="PASSED"></test>
      <test name="bail when receive a file or dir named .svn" id="13" result="PASSED"></test>
      <test name="update missing dir to rev in which it is absent" id="14" result="PASSED"></test>
      <test name="another 'hudson' problem: updates that delete" id="15" result="PASSED"></test>
      <test name="explicit update of deleted=true targets" id="16" result="PASSED"></test>
      <test name="receive new dir with spaces in its name" id="17" result="PASSED"></test>
      <test name="non-recursive update" id="18" result="PASSED"></test>
      <test name="check out an empty dir" id="19" result="PASSED"></test>
      <test name="update target till it's gone, then get it back" id="20" result="PASSED"></test>
      <test name="update child before parent of a deleted tree" id="21" result="PASSED"></test>
      <test name="update a schedule-add directory" id="22" result="PASSED"></test>
      <test name="update target that was added in a future rev" id="23" result="PASSED"></test>
      <test name="update a nested wc in a read-only wc" id="24" result="PASSED"></test>
      <test name="obstructed update alters WC properties" id="25" result="PASSED"></test>
      <test name="update dir with xml-unsafe name" id="26" result="PASSED"></test>
      <test name="conflict markers should match the file's eol style" id="27" result="PASSED"></test>
      <test name="handle eol-style propchange during update" id="28" result="PASSED"></test>
      <test name="update schedule-add copy of old rev" id="29" result="PASSED"></test>
      <test name="forced update tolerates obstructions to adds" id="30" result="PASSED"></test>
      <test name="forced up fails with some types of obstructions" id="31" result="PASSED"></test>
      <test name="update wc containing a replaced-with-history file" id="33" result="PASSED"></test>
      <test name="update handles obstructing paths scheduled for add" id="34" result="PASSED"></test>
      <test name="update conflicted files" id="35" result="PASSED"></test>
      <test name="mergeinfo does not elide after update" id="36" result="PASSED"></test>
      <test name="update should make use of copyfrom args" id="37" result="PASSED"></test>
      <test name="update degrades well if copyfrom_path unavailable" id="38" result="PASSED"></test>
      <test name="update uses copyfrom &amp; accepts further txdeltas" id="39" result="PASSED"></test>
      <test name="update chooses right copyfrom for double move" id="40" result="PASSED"></test>
      <test name="updating a copied file with a deleted property" id="41" result="PASSED"></test>
      <test name="update --accept automatic conflict resolution" id="42" result="PASSED"></test>
      <test name="eof in interactive resolution can't break wc" id="43" result="PASSED"></test>
      <test name="update fails when repos uuid changed" id="44" result="PASSED"></test>
    </suite>
  </server>
</PythonTests>
