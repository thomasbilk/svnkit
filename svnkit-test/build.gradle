configurations {
    pythonTests16
    svnBinaries16 
}
dependencies {
    pythonTests16 'org.tigris.subversion:svn-python-tests:1.6.17-SNAPSHOT@tgz'
    svnBinaries16 'org.tigris.subversion:svn-binaries:1.6.17-SNAPSHOT@tgz'
}

test.dependsOn configurations.pythonTests16 
test.dependsOn configurations.svnBinaries16

sandboxDir = new File(buildDir, 'sandbox')
svnBinariesDir = new File(sandboxDir, 'svn-binaries/linux')
pythonTestsDir = new File(sandboxDir, 'svn-python-tests')
logsDir = new File(buildDir, 'logs')
testPropertiesFile = new File(sandboxDir, 'test.properties')

pythonTestsTar = configurations.pythonTests16.files.find {return true}
svnBinariesTar = configurations.svnBinaries16.files.find {return true}

test {
    
} << {
    // 1. copy (unpack) necessary data and programs to sandbox
    project.mkdir(sandboxDir)
    project.mkdir(logsDir)
    exec {
        commandLine 'tar'
        args '-C', sandboxDir.absolutePath, '-xzf', pythonTestsTar.absolutePath 
    }
    exec {
        commandLine 'tar'
        args '-C', sandboxDir.absolutePath, '-xzf', svnBinariesTar.absolutePath 
    }
    copy {
        into pythonTestsDir
        from 'patch'
    }    
    copy {
        into sandboxDir
        from project.projectDir 
        include 'apache/**'
        include 'daemon/**'
        include 'python-suite.txt'
    }

    // 2. generate test environment properties and merge them with the test properties
    def testProperties = generateTestEnvironmentProperties()
    appendDefaultTestProperties(testProperties)
    testPropertiesFile.withOutputStream { stream ->
        testProperties.save(stream, null)
    }
    
    javaexec {
        workingDir = sandboxDir

        systemProperty 'ant.basedir', project.projectDir.absolutePath
        systemProperty 'sun.io.useCanonCaches', 'false'
        systemProperty 'svnkit.compatibleHash', 'true'
        
        environment 'LD_LIBRARY_PATH' : new File(svnBinariesDir, 'lib').absolutePath
        
        main = 'org.tmatesoft.svn.core.test.PythonTests'
        classpath = sourceSets.main.runtimeClasspath
        
        args testPropertiesFile.absolutePath, new File(sandboxDir, 'daemon').absolutePath
    }

}

def appendDefaultTestProperties(Map properties) {
    properties.put('python.tests.suite', 'basic')
    properties.put('python.http', 'true')
    properties.put('python.svn', 'false')
    properties.put('python.file', 'false')
}

def generateTestEnvironmentProperties() {
    Properties properties = new Properties()
    
    properties.put('daemon', 'true')

    properties.put('svn.home', svnBinariesDir.absolutePath )
    properties.put('svnserve.path', new File(svnBinariesDir, 'bin/svnserve').absolutePath )

    properties.put('apache.path', '/usr/sbin/apache2ctl')
    properties.put('apache.root', '/usr/lib/apache2')
    properties.put('apache.svn.modules', new File(svnBinariesDir, 'modules').absolutePath )

    properties.put('python.launcher', 'python')

    properties.put('python.tests', pythonTestsDir.absolutePath )

    
    return properties
}
