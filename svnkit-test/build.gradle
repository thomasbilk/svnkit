configurations {
    pythonTests16
    svnBinaries16 
}
dependencies {
    pythonTests16 'org.tigris.subversion:svn-python-tests:1.6.17-SNAPSHOT@tgz'
    svnBinaries16 'org.tigris.subversion:svn-binaries:1.6.17-SNAPSHOT@tgz'
}

sourceSets {
    main {
        java {
            srcDir file('nailgun/src/java/prod')
        }
    }
}

test.dependsOn configurations.pythonTests16 
test.dependsOn configurations.svnBinaries16

sandboxDir = new File(buildDir, 'sandbox')
svnBinariesDir = new File(sandboxDir, 'svn-binaries/' + getOSName())
pythonTestsDir = new File(sandboxDir, 'svn-python-tests')
logsDir = new File(buildDir, 'logs')
testPropertiesFile = new File(sandboxDir, 'test.properties')

pythonTestsTar = configurations.pythonTests16.files.find {return true}
svnBinariesTar = configurations.svnBinaries16.files.find {return true}

test {
    
} << {
    project.mkdir(sandboxDir)
    project.mkdir(logsDir)
    untar(pythonTestsTar, sandboxDir)
    untar(svnBinariesTar, sandboxDir)
    buildNailgun()

    copy {
        into sandboxDir
        from project.projectDir 
        include 'apache/**'
        include 'daemon/**'
        include 'python-suite.txt'
    }
    if (!svnBinariesDir.isDirectory() && System.getenv()['SVN_TEST_HOME'] != null) {
        svnBinariesDir = new File(System.getenv()['SVN_TEST_HOME'])
    } 
    println "Using Subversion binaries at $svnBinariesDir"
    
    if (svnBinariesDir == null || !svnBinariesDir.isDirectory()) {
        println "Cannot locate subversion binaries for '${getOSName()}' OS, skipping python tests."
        return
    }
    
    // 2. generate test environment properties and merge them with the test properties
    def testProperties = generateTestEnvironmentProperties(svnBinariesDir)
    appendDefaultTestProperties(testProperties)
    testPropertiesFile.withOutputStream { stream ->
        testProperties.save(stream, null)
    }
    
    javaexec {
        workingDir = sandboxDir

        systemProperty 'ant.basedir', project.projectDir.absolutePath
        systemProperty 'sun.io.useCanonCaches', 'false'
        systemProperty 'svnkit.compatibleHash', 'true'
        
        environment 'LD_LIBRARY_PATH' : new File(svnBinariesDir, 'lib').absolutePath
        
        main = 'org.tmatesoft.svn.core.test.PythonTests'
        classpath = sourceSets.main.runtimeClasspath
        
        args testPropertiesFile.absolutePath, new File(sandboxDir, 'daemon').absolutePath
    }

}

def appendDefaultTestProperties(Map properties) {
    properties.put('python.tests.suite', 'basic')
    properties.put('python.http', 'false')
    properties.put('python.svn', 'true')
    properties.put('python.file', 'false')
}

def generateTestEnvironmentProperties(File svnBinaries) {
    Properties properties = new Properties()
    
    properties.put('daemon', 'true')

    properties.put('svn.home', svnBinariesDir.absolutePath )
    properties.put('svnserve.path', new File(svnBinaries, 'bin/svnserve').absolutePath )

    properties.put('apache.path', '/usr/sbin/apache2ctl')
    properties.put('apache.root', '/usr/lib/apache2')
    properties.put('apache.svn.modules', new File(svnBinaries, 'modules').absolutePath )

    properties.put('python.launcher', 'python')

    properties.put('python.tests', pythonTestsDir.absolutePath )
    return properties
}

def untar(File tgz, File into) {
    if (getOSName() != 'windows') {
        exec {
            commandLine 'tar'
            args '-C', into.absolutePath, '-xzf', tgz.absolutePath
        }
    } else {
        ant.untar(src: tgz.absolutePath, dest: into.absolutePath, compression: 'gzip')
    }
}

def buildNailgun() {
    copy {
        from file('nailgun')
        into new File(sandboxDir, 'daemon')

        include '**/ng.exe'
        include 'src/**'
        include 'Makefile'
    }

    if (getOSName() != 'windows') {
        exec {
           commandLine 'make'
           args 'ng'
           workingDir = new File(sandboxDir, 'daemon')
        }
    }
   
}

def getOSName() {
    String osNameProperty = System.getProperty('os.name')
    osNameProperty = osNameProperty.toLowerCase()
    if (osNameProperty.indexOf('windows') >= 0) {
        return 'windows'
    } else if (osNameProperty.indexOf('mac') >= 0) {
        return 'osx'
    }
    return 'linux'
}
