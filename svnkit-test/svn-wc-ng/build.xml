<?xml version="1.0" encoding="UTF-8"?>
<project name="svn-wc-ng" default="main" basedir="./../..">

	<property file="svnkit-test/svn-wc-ng/svn-wc-ng.properties" />

	<target name="clean">

		<delete dir="${target.dir}" verbose="false" failonerror="true" />

		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.dir}/userprofile" />

	</target>

	<target name="do-create-repository-native">

		<mkdir dir="${target.dir}/repository" />

		<exec dir="${target.dir}" executable="${path.svnadmin}/svnadmin.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="create ${target.dir.ux}/repository" />
		</exec>

	</target>

	<target name="init-import">

		<mkdir dir="${target.dir}/import" />

		<mkdir dir="${target.dir}/import/test" />
		<touch file="${target.dir}/import/test/file1.txt">
		</touch>
		<echo file="${target.dir}/import/test/file1.txt" message="/file1.txt">
		</echo>
		<touch file="${target.dir}/import/test/file2.txt">
		</touch>
		<echo file="${target.dir}/import/test/file2.txt" message="/file2.txt">
		</echo>
		<mkdir dir="${target.dir}/import/test/dir1" />
		<touch file="${target.dir}/import/test/dir1/file1.txt">
		</touch>
		<echo file="${target.dir}/import/test/dir1/file1.txt" message="/dir1/file1.txt">
		</echo>
		<touch file="${target.dir}/import/test/dir1/file2.txt">
		</touch>
		<echo file="${target.dir}/import/test/dir1/file2.txt" message="/dir1/file2.txt">
		</echo>
		<mkdir dir="${target.dir}/import/test/dir2" />
		<touch file="${target.dir}/import/test/dir2/file1.txt">
		</touch>
		<echo file="${target.dir}/import/test/dir2/file1.txt" message="/dir2/file1.txt">
		</echo>
		<touch file="${target.dir}/import/test/dir2/file2.txt">
		</touch>
		<echo file="${target.dir}/import/test/dir2/file2.txt" message="/dir2/file2.txt">
		</echo>

	</target>

	<target name="do-import-native" depends="init-import">

		<exec dir="${target.dir}" executable="${path.svn}/svn.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="import ${target.dir.ux}/import/test file://localhost/${target.dir.ux}/repository/test -m 'initial import'" />
		</exec>

	</target>

	<target name="do-checkout-native" depends="do-create-repository-native, do-import-native">

		<mkdir dir="${target.dir}/workingcopy" />

		<exec dir="${target.dir}" executable="${path.svn}/svn.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="checkout file://localhost/${target.dir.ux}/repository/test workingcopy/test" />
		</exec>

	</target>

	<target name="do-modify" depends="do-create-repository-native, do-import-native">

		<echo file="${target.dir}/workingcopy/test/file1.txt" append="true" message="\ntest\n" />
		<touch file="${target.dir}/workingcopy/test/add.txt" />

		<exec dir="${target.dir}" executable="${path.svn}/svn.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="add workingcopy/test/add.txt" />
		</exec>

		<exec dir="${target.dir}" executable="${path.svn}/svn.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="delete workingcopy/test/file2.txt" />
		</exec>

	</target>

	<target name="do-status-native">

		<exec dir="${target.dir}" executable="${path.svn}/svn.exe">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<arg line="-v status workingcopy/test" />
		</exec>

	</target>

	<target name="do-status-jsvn" depends="deploy-svnkit">

		<exec dir="${target.dir}" executable="${basedir}/build/lib/jsvn.bat">
			<env key="USERPROFILE" value="${target.dir}/userprofile" />
			<env key="SVNKIT_OPTIONS" value="-Dsvnkit.wc.17=true" />
			<arg line="-v status workingcopy/test" />
		</exec>

	</target>

	<target name="do-svnkit-test" depends="compile-svnkit-tests">
		<echo message="${target.dir}/workingcopy/test" />
		<junit dir="${target.dir}" fork="true" showoutput="true" printsummary="true">
			<classpath>
				<pathelement location="contrib/junit/junit.jar" />
				<pathelement location="contrib/trilead/trilead.jar" />
				<pathelement location="contrib/jna/jna.jar" />
				<pathelement location="contrib/sqljet/sqljet.jar" />
				<pathelement location="contrib/sqljet/antlr-runtime-3.1.3.jar" />
				<pathelement path="svnkit/bin" />
				<pathelement path="svnkit/src" />
				<pathelement path="svnkit-test/src" />
				<pathelement path="svnkit-test/bin" />
				<pathelement path="contrib/sequence/bin" />
				<pathelement path="contrib/javahl/bin" />
				<pathelement path="contrib/javahl/bin-test" />
			</classpath>
			<test name="org.tmatesoft.svn.core.internal.wc17.SVNStatus17TestCase" />
		</junit>
	</target>

	<target name="deploy-svnkit">
		<ant antfile="build.xml" dir="${basedir}" target="deploy" />
	</target>

	<target name="compile-svnkit-tests">
		<ant antfile="build.xml" dir="${basedir}" target="compile-tests" />
	</target>

	<target name="do-create" depends="clean, do-checkout-native">
	</target>

	<target name="main" depends="do-create, do-modify, do-status-native, do-svnkit-test, do-status-jsvn">
	</target>

	<target name="do-modify-stat-5" depends="do-create">
		<rename dest="${target.dir}/workingcopy/test/_file1.txt" src="${target.dir}/workingcopy/test/file1.txt"/>
		<rename dest="${target.dir}/workingcopy/test/file1.txt" src="${target.dir}/workingcopy/test/dir1"/>
		<rename dest="${target.dir}/workingcopy/test/dir1" src="${target.dir}/workingcopy/test/_file1.txt"/>
	</target>

	<import file="${basedir}/build.xml"/>

    <target name="build-cli" depends="build-library">

		<antcall target="svnkit.build-cli">
		</antcall>

        <copy todir="build/lib" overwrite="true">
            <fileset dir="svnkit-test/svn-wc-ng">
                <include name="*.bat" />
            </fileset>
        </copy>

    	<!-- do the same replacements for .bat files -->
    	<replace token="%sqljet.version%" value="${sqljet.version}" file="build/lib/jsvn.bat"/>
       	<replace token="%antlr.version%" value="${antlr.version}" file="build/lib/jsvn.bat"/>
       	<replace token="%path.svn%" value="${path.svn}" file="build/lib/jsvn.bat"/>

    	<replace token="%sqljet.version%" value="${sqljet.version}" file="build/lib/jsvnadmin.bat"/>
    	<replace token="%antlr.version%" value="${antlr.version}" file="build/lib/jsvnadmin.bat"/>
       	<replace token="%path.svnadmin%" value="${path.svnadmin}" file="build/lib/jsvnadmin.bat"/>

    </target>

    <target name="test-python" depends="init-test-properties,init-environment,compile-tests,build-library,build-cli,build-dav">
    	<property name="python.test.home" value="${basedir}/build/python"/>
    	<mkdir dir="${python.test.home}"/>
    	<delete includeemptydirs="true">
			<fileset dir="${python.test.home}" defaultexcludes="no">
    		  <include name="**/*"/>
        	</fileset>
		</delete>

        <property name="python.test.properties" value="svnkit-test/test.${os}.properties"/>
        <copy file="${python.test.properties}"
              tofile="${python.test.home}/test.properties"
              failonerror="true"
              overwrite="true"
        />

    	<mkdir dir="${python.test.home}/python/cmdline"/>
    	<copy todir="${python.test.home}/python/cmdline">
    		<fileset dir="svnkit-test/python/cmdline">
    			<exclude name=".svn"/>
    			<exclude name=".svn/**"/>
    			<exclude name="svn-test-work"/>
    			<exclude name="svn-test-work/**"/>
    		</fileset>
        </copy>
        <mkdir dir="${python.test.home}/python/cmdline-trunk"/>
        <copy todir="${python.test.home}/python/cmdline-trunk">
            <fileset dir="svnkit-test/python/cmdline-trunk">
                <exclude name=".svn"/>
                <exclude name=".svn/**"/>
                <exclude name="svn-test-work"/>
                <exclude name="svn-test-work/**"/>
            </fileset>
        </copy>
    	<copy todir="${python.test.home}/python/cmdline"  overwrite="true" failonerror="true">
    		<fileset dir="svnkit-test/patch">
    			<include name="**/**"/>
    		</fileset>
        </copy>
    	<copy todir="${python.test.home}/python/cmdline-trunk"  overwrite="true" failonerror="true">
    		<fileset dir="svnkit-test/patch">
    			<include name="entries-dump"/>
    		</fileset>
        </copy>
    	<copy todir="${python.test.home}">
    		<fileset dir="svnkit-test">
    			<include name="test.properties"/>
    			<include name="fsfs.conf" />
    			<include name="python-suite.txt"/>
    			<include name="apache/**"/>
    			<include name="daemon/**"/>
    			<exclude name=".svn"/>
    			<exclude name=".svn/**"/>
    		</fileset>
        </copy>
    	<chmod perm="ugo+x">
    	    <fileset dir="${python.test.home}/python/cmdline">
    			<include name="**/*.py"/>
			</fileset>
            <fileset dir="${python.test.home}/python/cmdline-trunk">
                <include name="**/*.py"/>
                <include name="entries-dump"/>
            </fileset>
    	</chmod>
    	<pathconvert targetos="unix" property="basedir.unix">
    		<path location="${basedir}"/>
    	</pathconvert>

    	<path id="python.classpath">
            <pathelement path="build/lib/svnkit.jar" />
            <pathelement path="build/lib/svnkit-cli.jar" />
            <pathelement path="build/lib/trilead.jar" />
            <pathelement path="build/lib/jna.jar" />
            <pathelement path="contrib/junit/junit.jar" />
            <pathelement path="contrib/sqljet/sqljet.jar" />
            <pathelement path="contrib/sqljet/antlr-runtime-${antlr.version}.jar" />
    		<pathelement path="svnkit-test/bin" />
        </path>

        <copy file="svnkit-test/logging.cli.properties"
              overwrite="true"
              tofile="build/lib/logging.properties"
              failonerror="false"
        />
        <copy file="svnkit-test/logging.properties"
              overwrite="true"
              tofile="${python.test.home}/logging.python.properties"
              failonerror="false"
        />
    	<replace token="%ant.dir%" file="build/lib/logging.properties" value="${basedir.unix}"/>
    	<replace token="%ant.dir%" file="${python.test.home}/logging.python.properties" value="${basedir.unix}"/>

    	<mkdir dir="build/logs"/>
    	<delete failonerror="false">
    		<fileset dir="build/logs">
    			<include name="**/**"/>
    	    </fileset>
        </delete>
    	<!-- Unjar tomcat.jar -->
    	<unjar src="svnkit-test/tomcat/tomcat.jar" dest="${python.test.home}" />
        <chmod file="${python.test.home}/tomcat/bin/catalina.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/digest.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/setclasspath.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/shutdown.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/startup.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/tool-wrapper.sh" perm="ugo+rx" />
        <chmod file="${python.test.home}/tomcat/bin/version.sh" perm="ugo+rx" />

    	<copy file="svnkit-test/tomcat/logging.properties" overwrite="true" tofile="${python.test.home}/tomcat/conf/logging.properties" failonerror="false" />
    	<replace token="%build.test.home%" file="${python.test.home}/tomcat/conf/logging.properties" value="${basedir}/build" />

    	<unwar src="build/lib/svnkit.war" dest="${python.test.home}/tomcat/webapps/svnkit" />
    	<replace token="%python.test.home%" file="${python.test.home}/tomcat/webapps/svnkit/WEB-INF/web.xml" value="${python.test.home}" />

    	<java classpathref="python.classpath"
              dir="${python.test.home}"
              fork="true"
              classname="org.tmatesoft.svn.core.internal.wc17.PythonTests">
         <jvmarg value="-client" />
         <jvmarg value="-Dant.basedir=${basedir.unix}" />
         <jvmarg value="-Dsun.io.useCanonCaches=false" />
         <jvmarg value="-Dsvnkit.compatibleHash=true" />
         <jvmarg value="-Dsvnkit.wc.17=${svnkit.wc.17}" />
<!--     Uncomment for profiling with YourKit -->
<!--         <jvmarg value="-agentlib:yjpagent=port=1729,disablecounts,disablealloc,disablej2ee,sampling,onexit=snapshot" /> -->
<!--     Uncomment to enable remote debugging -->
<!--         <jvmarg value="-agentlib:jdwp=transport=dt_socket,suspend=n,server=y,address=1729" />  -->
         <arg line="${python.test.home}/test.properties" />
         <arg path="${basedir}/build/lib" />
    	</java>
    	<property name="teamcity.buildConfName" value="local" />
    	<antcall target="zip-logs"/>
    	<delete file="build/lib/logging.properties" failonerror="false"/>
    	<delete file="build/lib/logging.python.properties" failonerror="false"/>
    	<delete failonerror="false">
    		<fileset dir="build/logs">
    			<include name="**/*.lck"/>
    	    </fileset>
    	</delete>
        <copy file="${python.test.home}/python-tests-log.xml"
              tofile="build/logs/python-tests-log.xml"
              failonerror="false"
              overwrite="true"
        />
    </target>

</project>